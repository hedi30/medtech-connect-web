{"ast":null,"code":"import * as React from 'react';\nimport { useRtl } from '@mui/system/RtlProvider';\nimport { GRID_TREE_DATA_GROUPING_FIELD, GRID_DETAIL_PANEL_TOGGLE_FIELD } from \"../../../internals/constants.js\";\nimport { isGroupingColumn } from \"../../../internals/utils/gridRowGroupingUtils.js\";\nimport { gridVisibleColumnDefinitionsSelector, gridVisibleColumnFieldsSelector } from \"../columns/gridColumnsSelector.js\";\nimport { useGridLogger } from \"../../utils/useGridLogger.js\";\nimport { useGridApiEventHandler } from \"../../utils/useGridApiEventHandler.js\";\nimport { gridExpandedSortedRowEntriesSelector } from \"../filter/gridFilterSelector.js\";\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from \"../../../colDef/gridCheckboxSelectionColDef.js\";\nimport { gridClasses } from \"../../../constants/gridClasses.js\";\nimport { GridCellModes } from \"../../../models/gridEditRowModel.js\";\nimport { isNavigationKey } from \"../../../utils/keyboardUtils.js\";\nimport { gridFocusColumnGroupHeaderSelector } from \"../focus/index.js\";\nimport { gridColumnGroupsHeaderMaxDepthSelector } from \"../columnGrouping/gridColumnGroupsSelector.js\";\nimport { gridHeaderFilteringEditFieldSelector, gridHeaderFilteringMenuSelector } from \"../headerFiltering/gridHeaderFilteringSelectors.js\";\nimport { useGridRegisterPipeProcessor } from \"../../core/pipeProcessing/index.js\";\nimport { isEventTargetInPortal } from \"../../../utils/domUtils.js\";\nimport { getLeftColumnIndex, getRightColumnIndex, findNonRowSpannedCell } from \"./utils.js\";\nimport { gridListColumnSelector } from \"../listView/gridListViewSelectors.js\";\nimport { createSelectorMemoized } from \"../../../utils/createSelector.js\";\nimport { gridVisibleRowsSelector } from \"../pagination/index.js\";\nimport { gridPinnedRowsSelector } from \"../rows/gridRowsSelector.js\";\nconst gridVisibleRowsWithPinnedRowsSelector = createSelectorMemoized(gridVisibleRowsSelector, gridPinnedRowsSelector, (visibleRows, pinnedRows) => {\n  return (pinnedRows.top || []).concat(visibleRows.rows, pinnedRows.bottom || []);\n});\n\n/**\n * @requires useGridSorting (method) - can be after\n * @requires useGridFilter (state) - can be after\n * @requires useGridColumns (state, method) - can be after\n * @requires useGridDimensions (method) - can be after\n * @requires useGridFocus (method) - can be after\n * @requires useGridScroll (method) - can be after\n * @requires useGridColumnSpanning (method) - can be after\n */\nexport const useGridKeyboardNavigation = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridKeyboardNavigation');\n  const isRtl = useRtl();\n  const listView = props.unstable_listView;\n  const getCurrentPageRows = React.useCallback(() => {\n    return gridVisibleRowsWithPinnedRowsSelector(apiRef);\n  }, [apiRef]);\n  const headerFilteringEnabled = props.signature !== 'DataGrid' && props.headerFilters;\n\n  /**\n   * @param {number} colIndex Index of the column to focus\n   * @param {GridRowId} rowId index of the row to focus\n   * @param {string} closestColumnToUse Which closest column cell to use when the cell is spanned by `colSpan`.\n   * @param {string} rowSpanScanDirection Which direction to search to find the next cell not hidden by `rowSpan`.\n   * TODO replace with apiRef.current.moveFocusToRelativeCell()\n   */\n  const goToCell = React.useCallback((colIndex, rowId, closestColumnToUse = 'left', rowSpanScanDirection = 'up') => {\n    const visibleSortedRows = gridExpandedSortedRowEntriesSelector(apiRef);\n    const nextCellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, colIndex);\n    if (nextCellColSpanInfo && nextCellColSpanInfo.spannedByColSpan) {\n      if (closestColumnToUse === 'left') {\n        colIndex = nextCellColSpanInfo.leftVisibleCellIndex;\n      } else if (closestColumnToUse === 'right') {\n        colIndex = nextCellColSpanInfo.rightVisibleCellIndex;\n      }\n    }\n    const field = listView ? gridListColumnSelector(apiRef.current.state).field : gridVisibleColumnFieldsSelector(apiRef)[colIndex];\n    const nonRowSpannedRowId = findNonRowSpannedCell(apiRef, rowId, field, rowSpanScanDirection);\n    // `scrollToIndexes` requires a rowIndex relative to all visible rows.\n    // Those rows do not include pinned rows, but pinned rows do not need scroll anyway.\n    const rowIndexRelativeToAllRows = visibleSortedRows.findIndex(row => row.id === nonRowSpannedRowId);\n    logger.debug(`Navigating to cell row ${rowIndexRelativeToAllRows}, col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex,\n      rowIndex: rowIndexRelativeToAllRows\n    });\n    apiRef.current.setCellFocus(nonRowSpannedRowId, field);\n  }, [apiRef, logger, listView]);\n  const goToHeader = React.useCallback((colIndex, event) => {\n    logger.debug(`Navigating to header col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef, logger]);\n  const goToHeaderFilter = React.useCallback((colIndex, event) => {\n    logger.debug(`Navigating to header filter col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setColumnHeaderFilterFocus(field, event);\n  }, [apiRef, logger]);\n  const goToGroupHeader = React.useCallback((colIndex, depth, event) => {\n    logger.debug(`Navigating to header col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const {\n      field\n    } = apiRef.current.getVisibleColumns()[colIndex];\n    apiRef.current.setColumnGroupHeaderFocus(field, depth, event);\n  }, [apiRef, logger]);\n  const getRowIdFromIndex = React.useCallback(rowIndex => {\n    return getCurrentPageRows()[rowIndex]?.id;\n  }, [getCurrentPageRows]);\n  const handleColumnHeaderKeyDown = React.useCallback((params, event) => {\n    const headerTitleNode = event.currentTarget.querySelector(`.${gridClasses.columnHeaderTitleContainerContent}`);\n    const isFromInsideContent = !!headerTitleNode && headerTitleNode.contains(event.target);\n    if (isFromInsideContent && params.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // When focus is on a nested input, keyboard events have no effect to avoid conflicts with native events.\n      // There is one exception for the checkBoxHeader\n      return;\n    }\n    const currentPageRows = getCurrentPageRows();\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const firstRowIndexInPage = currentPageRows.length > 0 ? 0 : null;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    const columnGroupMaxDepth = gridColumnGroupsHeaderMaxDepthSelector(apiRef);\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          if (headerFilteringEnabled) {\n            goToHeaderFilter(colIndexBefore, event);\n          } else if (firstRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(firstRowIndexInPage));\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          const rightColIndex = getRightColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            isRtl\n          });\n          if (rightColIndex !== null) {\n            goToHeader(rightColIndex, event);\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          const leftColIndex = getLeftColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            isRtl\n          });\n          if (leftColIndex !== null) {\n            goToHeader(leftColIndex, event);\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          if (columnGroupMaxDepth > 0) {\n            goToGroupHeader(colIndexBefore, columnGroupMaxDepth - 1, event);\n          }\n          break;\n        }\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'Home':\n        {\n          goToHeader(firstColIndex, event);\n          break;\n        }\n      case 'End':\n        {\n          goToHeader(lastColIndex, event);\n          break;\n        }\n      case 'Enter':\n        {\n          if (event.ctrlKey || event.metaKey) {\n            apiRef.current.toggleColumnMenu(params.field);\n          }\n          break;\n        }\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, getCurrentPageRows, headerFilteringEnabled, goToHeaderFilter, goToCell, getRowIdFromIndex, isRtl, goToHeader, goToGroupHeader]);\n  const handleHeaderFilterKeyDown = React.useCallback((params, event) => {\n    const isEditing = gridHeaderFilteringEditFieldSelector(apiRef) === params.field;\n    const isHeaderMenuOpen = gridHeaderFilteringMenuSelector(apiRef) === params.field;\n    if (isEditing || isHeaderMenuOpen || !isNavigationKey(event.key)) {\n      return;\n    }\n    const currentPageRows = getCurrentPageRows();\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          const rowId = getRowIdFromIndex(firstRowIndexInPage);\n          if (firstRowIndexInPage !== null && rowId != null) {\n            goToCell(colIndexBefore, rowId);\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          const rightColIndex = getRightColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            isRtl\n          });\n          if (rightColIndex !== null) {\n            goToHeaderFilter(rightColIndex, event);\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          const leftColIndex = getLeftColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            isRtl\n          });\n          if (leftColIndex !== null) {\n            goToHeaderFilter(leftColIndex, event);\n          } else {\n            apiRef.current.setColumnHeaderFilterFocus(params.field, event);\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          goToHeader(colIndexBefore, event);\n          break;\n        }\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'Home':\n        {\n          goToHeaderFilter(firstColIndex, event);\n          break;\n        }\n      case 'End':\n        {\n          goToHeaderFilter(lastColIndex, event);\n          break;\n        }\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, getCurrentPageRows, goToHeaderFilter, isRtl, goToHeader, goToCell, getRowIdFromIndex]);\n  const handleColumnGroupHeaderKeyDown = React.useCallback((params, event) => {\n    const focusedColumnGroup = gridFocusColumnGroupHeaderSelector(apiRef);\n    if (focusedColumnGroup === null) {\n      return;\n    }\n    const {\n      field: currentField,\n      depth: currentDepth\n    } = focusedColumnGroup;\n    const {\n      fields,\n      depth,\n      maxDepth\n    } = params;\n    const currentPageRows = getCurrentPageRows();\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const currentColIndex = apiRef.current.getColumnIndex(currentField);\n    const colIndexBefore = currentField ? apiRef.current.getColumnIndex(currentField) : 0;\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          if (depth === maxDepth - 1) {\n            goToHeader(currentColIndex, event);\n          } else {\n            goToGroupHeader(currentColIndex, currentDepth + 1, event);\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          if (depth > 0) {\n            goToGroupHeader(currentColIndex, currentDepth - 1, event);\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          const remainingRightColumns = fields.length - fields.indexOf(currentField) - 1;\n          if (currentColIndex + remainingRightColumns + 1 <= lastColIndex) {\n            goToGroupHeader(currentColIndex + remainingRightColumns + 1, currentDepth, event);\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          const remainingLeftColumns = fields.indexOf(currentField);\n          if (currentColIndex - remainingLeftColumns - 1 >= firstColIndex) {\n            goToGroupHeader(currentColIndex - remainingLeftColumns - 1, currentDepth, event);\n          }\n          break;\n        }\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'Home':\n        {\n          goToGroupHeader(firstColIndex, currentDepth, event);\n          break;\n        }\n      case 'End':\n        {\n          goToGroupHeader(lastColIndex, currentDepth, event);\n          break;\n        }\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, getCurrentPageRows, goToHeader, goToGroupHeader, goToCell, getRowIdFromIndex]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Ignore portal\n    if (isEventTargetInPortal(event)) {\n      return;\n    }\n\n    // Get the most recent params because the cell mode may have changed by another listener\n    const cellParams = apiRef.current.getCellParams(params.id, params.field);\n    if (cellParams.cellMode === GridCellModes.Edit || !isNavigationKey(event.key)) {\n      return;\n    }\n    const canUpdateFocus = apiRef.current.unstable_applyPipeProcessors('canUpdateFocus', true, {\n      event,\n      cell: cellParams\n    });\n    if (!canUpdateFocus) {\n      return;\n    }\n    const currentPageRows = getCurrentPageRows();\n    if (currentPageRows.length === 0) {\n      return;\n    }\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const getColumnIndexFn = listView ? () => 0 : apiRef.current.getColumnIndex;\n    const colIndexBefore = params.field ? getColumnIndexFn(params.field) : 0;\n    const rowIndexBefore = currentPageRows.findIndex(row => row.id === params.id);\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const visibleColumns = listView ? [gridListColumnSelector(apiRef.current.state)] : gridVisibleColumnDefinitionsSelector(apiRef);\n    const lastColIndex = visibleColumns.length - 1;\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          // \"Enter\" is only triggered by the row / cell editing feature\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore + 1), isRtl ? 'right' : 'left', 'down');\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          if (rowIndexBefore > firstRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore - 1));\n          } else if (headerFilteringEnabled) {\n            goToHeaderFilter(colIndexBefore, event);\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          const rightColIndex = getRightColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            isRtl\n          });\n          if (rightColIndex !== null) {\n            goToCell(rightColIndex, getRowIdFromIndex(rowIndexBefore), isRtl ? 'left' : 'right');\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          const leftColIndex = getLeftColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            isRtl\n          });\n          if (leftColIndex !== null) {\n            goToCell(leftColIndex, getRowIdFromIndex(rowIndexBefore), isRtl ? 'right' : 'left');\n          }\n          break;\n        }\n      case 'Tab':\n        {\n          // \"Tab\" is only triggered by the row / cell editing feature\n          if (event.shiftKey && colIndexBefore > firstColIndex) {\n            goToCell(colIndexBefore - 1, getRowIdFromIndex(rowIndexBefore), 'left');\n          } else if (!event.shiftKey && colIndexBefore < lastColIndex) {\n            goToCell(colIndexBefore + 1, getRowIdFromIndex(rowIndexBefore), 'right');\n          }\n          break;\n        }\n      case ' ':\n        {\n          const field = params.field;\n          if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n            break;\n          }\n          const colDef = params.colDef;\n          if (colDef && (colDef.field === GRID_TREE_DATA_GROUPING_FIELD || isGroupingColumn(colDef.field))) {\n            break;\n          }\n          if (!event.shiftKey && rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'PageDown':\n        {\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'PageUp':\n        {\n          // Go to the first row before going to header\n          const nextRowIndex = Math.max(rowIndexBefore - viewportPageSize, firstRowIndexInPage);\n          if (nextRowIndex !== rowIndexBefore && nextRowIndex >= firstRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(nextRowIndex));\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n          break;\n        }\n      case 'Home':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(firstColIndex, getRowIdFromIndex(firstRowIndexInPage));\n          } else {\n            goToCell(firstColIndex, getRowIdFromIndex(rowIndexBefore));\n          }\n          break;\n        }\n      case 'End':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(lastColIndex, getRowIdFromIndex(lastRowIndexInPage));\n          } else {\n            goToCell(lastColIndex, getRowIdFromIndex(rowIndexBefore));\n          }\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, getCurrentPageRows, isRtl, goToCell, getRowIdFromIndex, headerFilteringEnabled, goToHeaderFilter, goToHeader, listView]);\n  const checkIfCanStartEditing = React.useCallback((initialValue, {\n    event\n  }) => {\n    if (event.key === ' ') {\n      // Space scrolls to the last row\n      return false;\n    }\n    return initialValue;\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'canStartEditing', checkIfCanStartEditing);\n  useGridApiEventHandler(apiRef, 'columnHeaderKeyDown', handleColumnHeaderKeyDown);\n  useGridApiEventHandler(apiRef, 'headerFilterKeyDown', handleHeaderFilterKeyDown);\n  useGridApiEventHandler(apiRef, 'columnGroupHeaderKeyDown', handleColumnGroupHeaderKeyDown);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n};","map":{"version":3,"names":["React","useRtl","GRID_TREE_DATA_GROUPING_FIELD","GRID_DETAIL_PANEL_TOGGLE_FIELD","isGroupingColumn","gridVisibleColumnDefinitionsSelector","gridVisibleColumnFieldsSelector","useGridLogger","useGridApiEventHandler","gridExpandedSortedRowEntriesSelector","GRID_CHECKBOX_SELECTION_COL_DEF","gridClasses","GridCellModes","isNavigationKey","gridFocusColumnGroupHeaderSelector","gridColumnGroupsHeaderMaxDepthSelector","gridHeaderFilteringEditFieldSelector","gridHeaderFilteringMenuSelector","useGridRegisterPipeProcessor","isEventTargetInPortal","getLeftColumnIndex","getRightColumnIndex","findNonRowSpannedCell","gridListColumnSelector","createSelectorMemoized","gridVisibleRowsSelector","gridPinnedRowsSelector","gridVisibleRowsWithPinnedRowsSelector","visibleRows","pinnedRows","top","concat","rows","bottom","useGridKeyboardNavigation","apiRef","props","logger","isRtl","listView","unstable_listView","getCurrentPageRows","useCallback","headerFilteringEnabled","signature","headerFilters","goToCell","colIndex","rowId","closestColumnToUse","rowSpanScanDirection","visibleSortedRows","nextCellColSpanInfo","current","unstable_getCellColSpanInfo","spannedByColSpan","leftVisibleCellIndex","rightVisibleCellIndex","field","state","nonRowSpannedRowId","rowIndexRelativeToAllRows","findIndex","row","id","debug","scrollToIndexes","rowIndex","setCellFocus","goToHeader","event","getVisibleColumns","setColumnHeaderFocus","goToHeaderFilter","setColumnHeaderFilterFocus","goToGroupHeader","depth","setColumnGroupHeaderFocus","getRowIdFromIndex","handleColumnHeaderKeyDown","params","headerTitleNode","currentTarget","querySelector","columnHeaderTitleContainerContent","isFromInsideContent","contains","target","currentPageRows","viewportPageSize","getViewportPageSize","colIndexBefore","getColumnIndex","firstRowIndexInPage","length","lastRowIndexInPage","firstColIndex","lastColIndex","columnGroupMaxDepth","shouldPreventDefault","key","rightColIndex","currentColIndex","leftColIndex","Math","min","ctrlKey","metaKey","toggleColumnMenu","preventDefault","handleHeaderFilterKeyDown","isEditing","isHeaderMenuOpen","handleColumnGroupHeaderKeyDown","focusedColumnGroup","currentField","currentDepth","fields","maxDepth","remainingRightColumns","indexOf","remainingLeftColumns","handleCellKeyDown","cellParams","getCellParams","cellMode","Edit","canUpdateFocus","unstable_applyPipeProcessors","cell","getColumnIndexFn","rowIndexBefore","visibleColumns","shiftKey","colDef","nextRowIndex","max","checkIfCanStartEditing","initialValue"],"sources":["/home/asma/dev/medtech-connect-web/Medtech-connect/frontend/node_modules/@mui/x-data-grid/hooks/features/keyboardNavigation/useGridKeyboardNavigation.js"],"sourcesContent":["import * as React from 'react';\nimport { useRtl } from '@mui/system/RtlProvider';\nimport { GRID_TREE_DATA_GROUPING_FIELD, GRID_DETAIL_PANEL_TOGGLE_FIELD } from \"../../../internals/constants.js\";\nimport { isGroupingColumn } from \"../../../internals/utils/gridRowGroupingUtils.js\";\nimport { gridVisibleColumnDefinitionsSelector, gridVisibleColumnFieldsSelector } from \"../columns/gridColumnsSelector.js\";\nimport { useGridLogger } from \"../../utils/useGridLogger.js\";\nimport { useGridApiEventHandler } from \"../../utils/useGridApiEventHandler.js\";\nimport { gridExpandedSortedRowEntriesSelector } from \"../filter/gridFilterSelector.js\";\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from \"../../../colDef/gridCheckboxSelectionColDef.js\";\nimport { gridClasses } from \"../../../constants/gridClasses.js\";\nimport { GridCellModes } from \"../../../models/gridEditRowModel.js\";\nimport { isNavigationKey } from \"../../../utils/keyboardUtils.js\";\nimport { gridFocusColumnGroupHeaderSelector } from \"../focus/index.js\";\nimport { gridColumnGroupsHeaderMaxDepthSelector } from \"../columnGrouping/gridColumnGroupsSelector.js\";\nimport { gridHeaderFilteringEditFieldSelector, gridHeaderFilteringMenuSelector } from \"../headerFiltering/gridHeaderFilteringSelectors.js\";\nimport { useGridRegisterPipeProcessor } from \"../../core/pipeProcessing/index.js\";\nimport { isEventTargetInPortal } from \"../../../utils/domUtils.js\";\nimport { getLeftColumnIndex, getRightColumnIndex, findNonRowSpannedCell } from \"./utils.js\";\nimport { gridListColumnSelector } from \"../listView/gridListViewSelectors.js\";\nimport { createSelectorMemoized } from \"../../../utils/createSelector.js\";\nimport { gridVisibleRowsSelector } from \"../pagination/index.js\";\nimport { gridPinnedRowsSelector } from \"../rows/gridRowsSelector.js\";\nconst gridVisibleRowsWithPinnedRowsSelector = createSelectorMemoized(gridVisibleRowsSelector, gridPinnedRowsSelector, (visibleRows, pinnedRows) => {\n  return (pinnedRows.top || []).concat(visibleRows.rows, pinnedRows.bottom || []);\n});\n\n/**\n * @requires useGridSorting (method) - can be after\n * @requires useGridFilter (state) - can be after\n * @requires useGridColumns (state, method) - can be after\n * @requires useGridDimensions (method) - can be after\n * @requires useGridFocus (method) - can be after\n * @requires useGridScroll (method) - can be after\n * @requires useGridColumnSpanning (method) - can be after\n */\nexport const useGridKeyboardNavigation = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridKeyboardNavigation');\n  const isRtl = useRtl();\n  const listView = props.unstable_listView;\n  const getCurrentPageRows = React.useCallback(() => {\n    return gridVisibleRowsWithPinnedRowsSelector(apiRef);\n  }, [apiRef]);\n  const headerFilteringEnabled = props.signature !== 'DataGrid' && props.headerFilters;\n\n  /**\n   * @param {number} colIndex Index of the column to focus\n   * @param {GridRowId} rowId index of the row to focus\n   * @param {string} closestColumnToUse Which closest column cell to use when the cell is spanned by `colSpan`.\n   * @param {string} rowSpanScanDirection Which direction to search to find the next cell not hidden by `rowSpan`.\n   * TODO replace with apiRef.current.moveFocusToRelativeCell()\n   */\n  const goToCell = React.useCallback((colIndex, rowId, closestColumnToUse = 'left', rowSpanScanDirection = 'up') => {\n    const visibleSortedRows = gridExpandedSortedRowEntriesSelector(apiRef);\n    const nextCellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, colIndex);\n    if (nextCellColSpanInfo && nextCellColSpanInfo.spannedByColSpan) {\n      if (closestColumnToUse === 'left') {\n        colIndex = nextCellColSpanInfo.leftVisibleCellIndex;\n      } else if (closestColumnToUse === 'right') {\n        colIndex = nextCellColSpanInfo.rightVisibleCellIndex;\n      }\n    }\n    const field = listView ? gridListColumnSelector(apiRef.current.state).field : gridVisibleColumnFieldsSelector(apiRef)[colIndex];\n    const nonRowSpannedRowId = findNonRowSpannedCell(apiRef, rowId, field, rowSpanScanDirection);\n    // `scrollToIndexes` requires a rowIndex relative to all visible rows.\n    // Those rows do not include pinned rows, but pinned rows do not need scroll anyway.\n    const rowIndexRelativeToAllRows = visibleSortedRows.findIndex(row => row.id === nonRowSpannedRowId);\n    logger.debug(`Navigating to cell row ${rowIndexRelativeToAllRows}, col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex,\n      rowIndex: rowIndexRelativeToAllRows\n    });\n    apiRef.current.setCellFocus(nonRowSpannedRowId, field);\n  }, [apiRef, logger, listView]);\n  const goToHeader = React.useCallback((colIndex, event) => {\n    logger.debug(`Navigating to header col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef, logger]);\n  const goToHeaderFilter = React.useCallback((colIndex, event) => {\n    logger.debug(`Navigating to header filter col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setColumnHeaderFilterFocus(field, event);\n  }, [apiRef, logger]);\n  const goToGroupHeader = React.useCallback((colIndex, depth, event) => {\n    logger.debug(`Navigating to header col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const {\n      field\n    } = apiRef.current.getVisibleColumns()[colIndex];\n    apiRef.current.setColumnGroupHeaderFocus(field, depth, event);\n  }, [apiRef, logger]);\n  const getRowIdFromIndex = React.useCallback(rowIndex => {\n    return getCurrentPageRows()[rowIndex]?.id;\n  }, [getCurrentPageRows]);\n  const handleColumnHeaderKeyDown = React.useCallback((params, event) => {\n    const headerTitleNode = event.currentTarget.querySelector(`.${gridClasses.columnHeaderTitleContainerContent}`);\n    const isFromInsideContent = !!headerTitleNode && headerTitleNode.contains(event.target);\n    if (isFromInsideContent && params.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // When focus is on a nested input, keyboard events have no effect to avoid conflicts with native events.\n      // There is one exception for the checkBoxHeader\n      return;\n    }\n    const currentPageRows = getCurrentPageRows();\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const firstRowIndexInPage = currentPageRows.length > 0 ? 0 : null;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    const columnGroupMaxDepth = gridColumnGroupsHeaderMaxDepthSelector(apiRef);\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          if (headerFilteringEnabled) {\n            goToHeaderFilter(colIndexBefore, event);\n          } else if (firstRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(firstRowIndexInPage));\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          const rightColIndex = getRightColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            isRtl\n          });\n          if (rightColIndex !== null) {\n            goToHeader(rightColIndex, event);\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          const leftColIndex = getLeftColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            isRtl\n          });\n          if (leftColIndex !== null) {\n            goToHeader(leftColIndex, event);\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          if (columnGroupMaxDepth > 0) {\n            goToGroupHeader(colIndexBefore, columnGroupMaxDepth - 1, event);\n          }\n          break;\n        }\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'Home':\n        {\n          goToHeader(firstColIndex, event);\n          break;\n        }\n      case 'End':\n        {\n          goToHeader(lastColIndex, event);\n          break;\n        }\n      case 'Enter':\n        {\n          if (event.ctrlKey || event.metaKey) {\n            apiRef.current.toggleColumnMenu(params.field);\n          }\n          break;\n        }\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, getCurrentPageRows, headerFilteringEnabled, goToHeaderFilter, goToCell, getRowIdFromIndex, isRtl, goToHeader, goToGroupHeader]);\n  const handleHeaderFilterKeyDown = React.useCallback((params, event) => {\n    const isEditing = gridHeaderFilteringEditFieldSelector(apiRef) === params.field;\n    const isHeaderMenuOpen = gridHeaderFilteringMenuSelector(apiRef) === params.field;\n    if (isEditing || isHeaderMenuOpen || !isNavigationKey(event.key)) {\n      return;\n    }\n    const currentPageRows = getCurrentPageRows();\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          const rowId = getRowIdFromIndex(firstRowIndexInPage);\n          if (firstRowIndexInPage !== null && rowId != null) {\n            goToCell(colIndexBefore, rowId);\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          const rightColIndex = getRightColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            isRtl\n          });\n          if (rightColIndex !== null) {\n            goToHeaderFilter(rightColIndex, event);\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          const leftColIndex = getLeftColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            isRtl\n          });\n          if (leftColIndex !== null) {\n            goToHeaderFilter(leftColIndex, event);\n          } else {\n            apiRef.current.setColumnHeaderFilterFocus(params.field, event);\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          goToHeader(colIndexBefore, event);\n          break;\n        }\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'Home':\n        {\n          goToHeaderFilter(firstColIndex, event);\n          break;\n        }\n      case 'End':\n        {\n          goToHeaderFilter(lastColIndex, event);\n          break;\n        }\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, getCurrentPageRows, goToHeaderFilter, isRtl, goToHeader, goToCell, getRowIdFromIndex]);\n  const handleColumnGroupHeaderKeyDown = React.useCallback((params, event) => {\n    const focusedColumnGroup = gridFocusColumnGroupHeaderSelector(apiRef);\n    if (focusedColumnGroup === null) {\n      return;\n    }\n    const {\n      field: currentField,\n      depth: currentDepth\n    } = focusedColumnGroup;\n    const {\n      fields,\n      depth,\n      maxDepth\n    } = params;\n    const currentPageRows = getCurrentPageRows();\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const currentColIndex = apiRef.current.getColumnIndex(currentField);\n    const colIndexBefore = currentField ? apiRef.current.getColumnIndex(currentField) : 0;\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          if (depth === maxDepth - 1) {\n            goToHeader(currentColIndex, event);\n          } else {\n            goToGroupHeader(currentColIndex, currentDepth + 1, event);\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          if (depth > 0) {\n            goToGroupHeader(currentColIndex, currentDepth - 1, event);\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          const remainingRightColumns = fields.length - fields.indexOf(currentField) - 1;\n          if (currentColIndex + remainingRightColumns + 1 <= lastColIndex) {\n            goToGroupHeader(currentColIndex + remainingRightColumns + 1, currentDepth, event);\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          const remainingLeftColumns = fields.indexOf(currentField);\n          if (currentColIndex - remainingLeftColumns - 1 >= firstColIndex) {\n            goToGroupHeader(currentColIndex - remainingLeftColumns - 1, currentDepth, event);\n          }\n          break;\n        }\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'Home':\n        {\n          goToGroupHeader(firstColIndex, currentDepth, event);\n          break;\n        }\n      case 'End':\n        {\n          goToGroupHeader(lastColIndex, currentDepth, event);\n          break;\n        }\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, getCurrentPageRows, goToHeader, goToGroupHeader, goToCell, getRowIdFromIndex]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Ignore portal\n    if (isEventTargetInPortal(event)) {\n      return;\n    }\n\n    // Get the most recent params because the cell mode may have changed by another listener\n    const cellParams = apiRef.current.getCellParams(params.id, params.field);\n    if (cellParams.cellMode === GridCellModes.Edit || !isNavigationKey(event.key)) {\n      return;\n    }\n    const canUpdateFocus = apiRef.current.unstable_applyPipeProcessors('canUpdateFocus', true, {\n      event,\n      cell: cellParams\n    });\n    if (!canUpdateFocus) {\n      return;\n    }\n    const currentPageRows = getCurrentPageRows();\n    if (currentPageRows.length === 0) {\n      return;\n    }\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const getColumnIndexFn = listView ? () => 0 : apiRef.current.getColumnIndex;\n    const colIndexBefore = params.field ? getColumnIndexFn(params.field) : 0;\n    const rowIndexBefore = currentPageRows.findIndex(row => row.id === params.id);\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const visibleColumns = listView ? [gridListColumnSelector(apiRef.current.state)] : gridVisibleColumnDefinitionsSelector(apiRef);\n    const lastColIndex = visibleColumns.length - 1;\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          // \"Enter\" is only triggered by the row / cell editing feature\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore + 1), isRtl ? 'right' : 'left', 'down');\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          if (rowIndexBefore > firstRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore - 1));\n          } else if (headerFilteringEnabled) {\n            goToHeaderFilter(colIndexBefore, event);\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          const rightColIndex = getRightColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            isRtl\n          });\n          if (rightColIndex !== null) {\n            goToCell(rightColIndex, getRowIdFromIndex(rowIndexBefore), isRtl ? 'left' : 'right');\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          const leftColIndex = getLeftColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            isRtl\n          });\n          if (leftColIndex !== null) {\n            goToCell(leftColIndex, getRowIdFromIndex(rowIndexBefore), isRtl ? 'right' : 'left');\n          }\n          break;\n        }\n      case 'Tab':\n        {\n          // \"Tab\" is only triggered by the row / cell editing feature\n          if (event.shiftKey && colIndexBefore > firstColIndex) {\n            goToCell(colIndexBefore - 1, getRowIdFromIndex(rowIndexBefore), 'left');\n          } else if (!event.shiftKey && colIndexBefore < lastColIndex) {\n            goToCell(colIndexBefore + 1, getRowIdFromIndex(rowIndexBefore), 'right');\n          }\n          break;\n        }\n      case ' ':\n        {\n          const field = params.field;\n          if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n            break;\n          }\n          const colDef = params.colDef;\n          if (colDef && (colDef.field === GRID_TREE_DATA_GROUPING_FIELD || isGroupingColumn(colDef.field))) {\n            break;\n          }\n          if (!event.shiftKey && rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'PageDown':\n        {\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'PageUp':\n        {\n          // Go to the first row before going to header\n          const nextRowIndex = Math.max(rowIndexBefore - viewportPageSize, firstRowIndexInPage);\n          if (nextRowIndex !== rowIndexBefore && nextRowIndex >= firstRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(nextRowIndex));\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n          break;\n        }\n      case 'Home':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(firstColIndex, getRowIdFromIndex(firstRowIndexInPage));\n          } else {\n            goToCell(firstColIndex, getRowIdFromIndex(rowIndexBefore));\n          }\n          break;\n        }\n      case 'End':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(lastColIndex, getRowIdFromIndex(lastRowIndexInPage));\n          } else {\n            goToCell(lastColIndex, getRowIdFromIndex(rowIndexBefore));\n          }\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, getCurrentPageRows, isRtl, goToCell, getRowIdFromIndex, headerFilteringEnabled, goToHeaderFilter, goToHeader, listView]);\n  const checkIfCanStartEditing = React.useCallback((initialValue, {\n    event\n  }) => {\n    if (event.key === ' ') {\n      // Space scrolls to the last row\n      return false;\n    }\n    return initialValue;\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'canStartEditing', checkIfCanStartEditing);\n  useGridApiEventHandler(apiRef, 'columnHeaderKeyDown', handleColumnHeaderKeyDown);\n  useGridApiEventHandler(apiRef, 'headerFilterKeyDown', handleHeaderFilterKeyDown);\n  useGridApiEventHandler(apiRef, 'columnGroupHeaderKeyDown', handleColumnGroupHeaderKeyDown);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n};"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,MAAM,QAAQ,yBAAyB;AAChD,SAASC,6BAA6B,EAAEC,8BAA8B,QAAQ,iCAAiC;AAC/G,SAASC,gBAAgB,QAAQ,kDAAkD;AACnF,SAASC,oCAAoC,EAAEC,+BAA+B,QAAQ,mCAAmC;AACzH,SAASC,aAAa,QAAQ,8BAA8B;AAC5D,SAASC,sBAAsB,QAAQ,uCAAuC;AAC9E,SAASC,oCAAoC,QAAQ,iCAAiC;AACtF,SAASC,+BAA+B,QAAQ,gDAAgD;AAChG,SAASC,WAAW,QAAQ,mCAAmC;AAC/D,SAASC,aAAa,QAAQ,qCAAqC;AACnE,SAASC,eAAe,QAAQ,iCAAiC;AACjE,SAASC,kCAAkC,QAAQ,mBAAmB;AACtE,SAASC,sCAAsC,QAAQ,+CAA+C;AACtG,SAASC,oCAAoC,EAAEC,+BAA+B,QAAQ,oDAAoD;AAC1I,SAASC,4BAA4B,QAAQ,oCAAoC;AACjF,SAASC,qBAAqB,QAAQ,4BAA4B;AAClE,SAASC,kBAAkB,EAAEC,mBAAmB,EAAEC,qBAAqB,QAAQ,YAAY;AAC3F,SAASC,sBAAsB,QAAQ,sCAAsC;AAC7E,SAASC,sBAAsB,QAAQ,kCAAkC;AACzE,SAASC,uBAAuB,QAAQ,wBAAwB;AAChE,SAASC,sBAAsB,QAAQ,6BAA6B;AACpE,MAAMC,qCAAqC,GAAGH,sBAAsB,CAACC,uBAAuB,EAAEC,sBAAsB,EAAE,CAACE,WAAW,EAAEC,UAAU,KAAK;EACjJ,OAAO,CAACA,UAAU,CAACC,GAAG,IAAI,EAAE,EAAEC,MAAM,CAACH,WAAW,CAACI,IAAI,EAAEH,UAAU,CAACI,MAAM,IAAI,EAAE,CAAC;AACjF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,yBAAyB,GAAGA,CAACC,MAAM,EAAEC,KAAK,KAAK;EAC1D,MAAMC,MAAM,GAAG9B,aAAa,CAAC4B,MAAM,EAAE,2BAA2B,CAAC;EACjE,MAAMG,KAAK,GAAGrC,MAAM,CAAC,CAAC;EACtB,MAAMsC,QAAQ,GAAGH,KAAK,CAACI,iBAAiB;EACxC,MAAMC,kBAAkB,GAAGzC,KAAK,CAAC0C,WAAW,CAAC,MAAM;IACjD,OAAOf,qCAAqC,CAACQ,MAAM,CAAC;EACtD,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC;EACZ,MAAMQ,sBAAsB,GAAGP,KAAK,CAACQ,SAAS,KAAK,UAAU,IAAIR,KAAK,CAACS,aAAa;;EAEpF;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAMC,QAAQ,GAAG9C,KAAK,CAAC0C,WAAW,CAAC,CAACK,QAAQ,EAAEC,KAAK,EAAEC,kBAAkB,GAAG,MAAM,EAAEC,oBAAoB,GAAG,IAAI,KAAK;IAChH,MAAMC,iBAAiB,GAAG1C,oCAAoC,CAAC0B,MAAM,CAAC;IACtE,MAAMiB,mBAAmB,GAAGjB,MAAM,CAACkB,OAAO,CAACC,2BAA2B,CAACN,KAAK,EAAED,QAAQ,CAAC;IACvF,IAAIK,mBAAmB,IAAIA,mBAAmB,CAACG,gBAAgB,EAAE;MAC/D,IAAIN,kBAAkB,KAAK,MAAM,EAAE;QACjCF,QAAQ,GAAGK,mBAAmB,CAACI,oBAAoB;MACrD,CAAC,MAAM,IAAIP,kBAAkB,KAAK,OAAO,EAAE;QACzCF,QAAQ,GAAGK,mBAAmB,CAACK,qBAAqB;MACtD;IACF;IACA,MAAMC,KAAK,GAAGnB,QAAQ,GAAGhB,sBAAsB,CAACY,MAAM,CAACkB,OAAO,CAACM,KAAK,CAAC,CAACD,KAAK,GAAGpD,+BAA+B,CAAC6B,MAAM,CAAC,CAACY,QAAQ,CAAC;IAC/H,MAAMa,kBAAkB,GAAGtC,qBAAqB,CAACa,MAAM,EAAEa,KAAK,EAAEU,KAAK,EAAER,oBAAoB,CAAC;IAC5F;IACA;IACA,MAAMW,yBAAyB,GAAGV,iBAAiB,CAACW,SAAS,CAACC,GAAG,IAAIA,GAAG,CAACC,EAAE,KAAKJ,kBAAkB,CAAC;IACnGvB,MAAM,CAAC4B,KAAK,CAAC,0BAA0BJ,yBAAyB,SAASd,QAAQ,EAAE,CAAC;IACpFZ,MAAM,CAACkB,OAAO,CAACa,eAAe,CAAC;MAC7BnB,QAAQ;MACRoB,QAAQ,EAAEN;IACZ,CAAC,CAAC;IACF1B,MAAM,CAACkB,OAAO,CAACe,YAAY,CAACR,kBAAkB,EAAEF,KAAK,CAAC;EACxD,CAAC,EAAE,CAACvB,MAAM,EAAEE,MAAM,EAAEE,QAAQ,CAAC,CAAC;EAC9B,MAAM8B,UAAU,GAAGrE,KAAK,CAAC0C,WAAW,CAAC,CAACK,QAAQ,EAAEuB,KAAK,KAAK;IACxDjC,MAAM,CAAC4B,KAAK,CAAC,4BAA4BlB,QAAQ,EAAE,CAAC;IACpDZ,MAAM,CAACkB,OAAO,CAACa,eAAe,CAAC;MAC7BnB;IACF,CAAC,CAAC;IACF,MAAMW,KAAK,GAAGvB,MAAM,CAACkB,OAAO,CAACkB,iBAAiB,CAAC,CAAC,CAACxB,QAAQ,CAAC,CAACW,KAAK;IAChEvB,MAAM,CAACkB,OAAO,CAACmB,oBAAoB,CAACd,KAAK,EAAEY,KAAK,CAAC;EACnD,CAAC,EAAE,CAACnC,MAAM,EAAEE,MAAM,CAAC,CAAC;EACpB,MAAMoC,gBAAgB,GAAGzE,KAAK,CAAC0C,WAAW,CAAC,CAACK,QAAQ,EAAEuB,KAAK,KAAK;IAC9DjC,MAAM,CAAC4B,KAAK,CAAC,mCAAmClB,QAAQ,EAAE,CAAC;IAC3DZ,MAAM,CAACkB,OAAO,CAACa,eAAe,CAAC;MAC7BnB;IACF,CAAC,CAAC;IACF,MAAMW,KAAK,GAAGvB,MAAM,CAACkB,OAAO,CAACkB,iBAAiB,CAAC,CAAC,CAACxB,QAAQ,CAAC,CAACW,KAAK;IAChEvB,MAAM,CAACkB,OAAO,CAACqB,0BAA0B,CAAChB,KAAK,EAAEY,KAAK,CAAC;EACzD,CAAC,EAAE,CAACnC,MAAM,EAAEE,MAAM,CAAC,CAAC;EACpB,MAAMsC,eAAe,GAAG3E,KAAK,CAAC0C,WAAW,CAAC,CAACK,QAAQ,EAAE6B,KAAK,EAAEN,KAAK,KAAK;IACpEjC,MAAM,CAAC4B,KAAK,CAAC,4BAA4BlB,QAAQ,EAAE,CAAC;IACpDZ,MAAM,CAACkB,OAAO,CAACa,eAAe,CAAC;MAC7BnB;IACF,CAAC,CAAC;IACF,MAAM;MACJW;IACF,CAAC,GAAGvB,MAAM,CAACkB,OAAO,CAACkB,iBAAiB,CAAC,CAAC,CAACxB,QAAQ,CAAC;IAChDZ,MAAM,CAACkB,OAAO,CAACwB,yBAAyB,CAACnB,KAAK,EAAEkB,KAAK,EAAEN,KAAK,CAAC;EAC/D,CAAC,EAAE,CAACnC,MAAM,EAAEE,MAAM,CAAC,CAAC;EACpB,MAAMyC,iBAAiB,GAAG9E,KAAK,CAAC0C,WAAW,CAACyB,QAAQ,IAAI;IACtD,OAAO1B,kBAAkB,CAAC,CAAC,CAAC0B,QAAQ,CAAC,EAAEH,EAAE;EAC3C,CAAC,EAAE,CAACvB,kBAAkB,CAAC,CAAC;EACxB,MAAMsC,yBAAyB,GAAG/E,KAAK,CAAC0C,WAAW,CAAC,CAACsC,MAAM,EAAEV,KAAK,KAAK;IACrE,MAAMW,eAAe,GAAGX,KAAK,CAACY,aAAa,CAACC,aAAa,CAAC,IAAIxE,WAAW,CAACyE,iCAAiC,EAAE,CAAC;IAC9G,MAAMC,mBAAmB,GAAG,CAAC,CAACJ,eAAe,IAAIA,eAAe,CAACK,QAAQ,CAAChB,KAAK,CAACiB,MAAM,CAAC;IACvF,IAAIF,mBAAmB,IAAIL,MAAM,CAACtB,KAAK,KAAKhD,+BAA+B,CAACgD,KAAK,EAAE;MACjF;MACA;MACA;IACF;IACA,MAAM8B,eAAe,GAAG/C,kBAAkB,CAAC,CAAC;IAC5C,MAAMgD,gBAAgB,GAAGtD,MAAM,CAACkB,OAAO,CAACqC,mBAAmB,CAAC,CAAC;IAC7D,MAAMC,cAAc,GAAGX,MAAM,CAACtB,KAAK,GAAGvB,MAAM,CAACkB,OAAO,CAACuC,cAAc,CAACZ,MAAM,CAACtB,KAAK,CAAC,GAAG,CAAC;IACrF,MAAMmC,mBAAmB,GAAGL,eAAe,CAACM,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI;IACjE,MAAMC,kBAAkB,GAAGP,eAAe,CAACM,MAAM,GAAG,CAAC;IACrD,MAAME,aAAa,GAAG,CAAC;IACvB,MAAMC,YAAY,GAAG5F,oCAAoC,CAAC8B,MAAM,CAAC,CAAC2D,MAAM,GAAG,CAAC;IAC5E,MAAMI,mBAAmB,GAAGnF,sCAAsC,CAACoB,MAAM,CAAC;IAC1E,IAAIgE,oBAAoB,GAAG,IAAI;IAC/B,QAAQ7B,KAAK,CAAC8B,GAAG;MACf,KAAK,WAAW;QACd;UACE,IAAIzD,sBAAsB,EAAE;YAC1B8B,gBAAgB,CAACkB,cAAc,EAAErB,KAAK,CAAC;UACzC,CAAC,MAAM,IAAIuB,mBAAmB,KAAK,IAAI,EAAE;YACvC/C,QAAQ,CAAC6C,cAAc,EAAEb,iBAAiB,CAACe,mBAAmB,CAAC,CAAC;UAClE;UACA;QACF;MACF,KAAK,YAAY;QACf;UACE,MAAMQ,aAAa,GAAGhF,mBAAmB,CAAC;YACxCiF,eAAe,EAAEX,cAAc;YAC/BK,aAAa;YACbC,YAAY;YACZ3D;UACF,CAAC,CAAC;UACF,IAAI+D,aAAa,KAAK,IAAI,EAAE;YAC1BhC,UAAU,CAACgC,aAAa,EAAE/B,KAAK,CAAC;UAClC;UACA;QACF;MACF,KAAK,WAAW;QACd;UACE,MAAMiC,YAAY,GAAGnF,kBAAkB,CAAC;YACtCkF,eAAe,EAAEX,cAAc;YAC/BK,aAAa;YACbC,YAAY;YACZ3D;UACF,CAAC,CAAC;UACF,IAAIiE,YAAY,KAAK,IAAI,EAAE;YACzBlC,UAAU,CAACkC,YAAY,EAAEjC,KAAK,CAAC;UACjC;UACA;QACF;MACF,KAAK,SAAS;QACZ;UACE,IAAI4B,mBAAmB,GAAG,CAAC,EAAE;YAC3BvB,eAAe,CAACgB,cAAc,EAAEO,mBAAmB,GAAG,CAAC,EAAE5B,KAAK,CAAC;UACjE;UACA;QACF;MACF,KAAK,UAAU;QACb;UACE,IAAIuB,mBAAmB,KAAK,IAAI,IAAIE,kBAAkB,KAAK,IAAI,EAAE;YAC/DjD,QAAQ,CAAC6C,cAAc,EAAEb,iBAAiB,CAAC0B,IAAI,CAACC,GAAG,CAACZ,mBAAmB,GAAGJ,gBAAgB,EAAEM,kBAAkB,CAAC,CAAC,CAAC;UACnH;UACA;QACF;MACF,KAAK,MAAM;QACT;UACE1B,UAAU,CAAC2B,aAAa,EAAE1B,KAAK,CAAC;UAChC;QACF;MACF,KAAK,KAAK;QACR;UACED,UAAU,CAAC4B,YAAY,EAAE3B,KAAK,CAAC;UAC/B;QACF;MACF,KAAK,OAAO;QACV;UACE,IAAIA,KAAK,CAACoC,OAAO,IAAIpC,KAAK,CAACqC,OAAO,EAAE;YAClCxE,MAAM,CAACkB,OAAO,CAACuD,gBAAgB,CAAC5B,MAAM,CAACtB,KAAK,CAAC;UAC/C;UACA;QACF;MACF,KAAK,GAAG;QACN;UACE;UACA;QACF;MACF;QACE;UACEyC,oBAAoB,GAAG,KAAK;QAC9B;IACJ;IACA,IAAIA,oBAAoB,EAAE;MACxB7B,KAAK,CAACuC,cAAc,CAAC,CAAC;IACxB;EACF,CAAC,EAAE,CAAC1E,MAAM,EAAEM,kBAAkB,EAAEE,sBAAsB,EAAE8B,gBAAgB,EAAE3B,QAAQ,EAAEgC,iBAAiB,EAAExC,KAAK,EAAE+B,UAAU,EAAEM,eAAe,CAAC,CAAC;EAC3I,MAAMmC,yBAAyB,GAAG9G,KAAK,CAAC0C,WAAW,CAAC,CAACsC,MAAM,EAAEV,KAAK,KAAK;IACrE,MAAMyC,SAAS,GAAG/F,oCAAoC,CAACmB,MAAM,CAAC,KAAK6C,MAAM,CAACtB,KAAK;IAC/E,MAAMsD,gBAAgB,GAAG/F,+BAA+B,CAACkB,MAAM,CAAC,KAAK6C,MAAM,CAACtB,KAAK;IACjF,IAAIqD,SAAS,IAAIC,gBAAgB,IAAI,CAACnG,eAAe,CAACyD,KAAK,CAAC8B,GAAG,CAAC,EAAE;MAChE;IACF;IACA,MAAMZ,eAAe,GAAG/C,kBAAkB,CAAC,CAAC;IAC5C,MAAMgD,gBAAgB,GAAGtD,MAAM,CAACkB,OAAO,CAACqC,mBAAmB,CAAC,CAAC;IAC7D,MAAMC,cAAc,GAAGX,MAAM,CAACtB,KAAK,GAAGvB,MAAM,CAACkB,OAAO,CAACuC,cAAc,CAACZ,MAAM,CAACtB,KAAK,CAAC,GAAG,CAAC;IACrF,MAAMmC,mBAAmB,GAAG,CAAC;IAC7B,MAAME,kBAAkB,GAAGP,eAAe,CAACM,MAAM,GAAG,CAAC;IACrD,MAAME,aAAa,GAAG,CAAC;IACvB,MAAMC,YAAY,GAAG5F,oCAAoC,CAAC8B,MAAM,CAAC,CAAC2D,MAAM,GAAG,CAAC;IAC5E,IAAIK,oBAAoB,GAAG,IAAI;IAC/B,QAAQ7B,KAAK,CAAC8B,GAAG;MACf,KAAK,WAAW;QACd;UACE,MAAMpD,KAAK,GAAG8B,iBAAiB,CAACe,mBAAmB,CAAC;UACpD,IAAIA,mBAAmB,KAAK,IAAI,IAAI7C,KAAK,IAAI,IAAI,EAAE;YACjDF,QAAQ,CAAC6C,cAAc,EAAE3C,KAAK,CAAC;UACjC;UACA;QACF;MACF,KAAK,YAAY;QACf;UACE,MAAMqD,aAAa,GAAGhF,mBAAmB,CAAC;YACxCiF,eAAe,EAAEX,cAAc;YAC/BK,aAAa;YACbC,YAAY;YACZ3D;UACF,CAAC,CAAC;UACF,IAAI+D,aAAa,KAAK,IAAI,EAAE;YAC1B5B,gBAAgB,CAAC4B,aAAa,EAAE/B,KAAK,CAAC;UACxC;UACA;QACF;MACF,KAAK,WAAW;QACd;UACE,MAAMiC,YAAY,GAAGnF,kBAAkB,CAAC;YACtCkF,eAAe,EAAEX,cAAc;YAC/BK,aAAa;YACbC,YAAY;YACZ3D;UACF,CAAC,CAAC;UACF,IAAIiE,YAAY,KAAK,IAAI,EAAE;YACzB9B,gBAAgB,CAAC8B,YAAY,EAAEjC,KAAK,CAAC;UACvC,CAAC,MAAM;YACLnC,MAAM,CAACkB,OAAO,CAACqB,0BAA0B,CAACM,MAAM,CAACtB,KAAK,EAAEY,KAAK,CAAC;UAChE;UACA;QACF;MACF,KAAK,SAAS;QACZ;UACED,UAAU,CAACsB,cAAc,EAAErB,KAAK,CAAC;UACjC;QACF;MACF,KAAK,UAAU;QACb;UACE,IAAIuB,mBAAmB,KAAK,IAAI,IAAIE,kBAAkB,KAAK,IAAI,EAAE;YAC/DjD,QAAQ,CAAC6C,cAAc,EAAEb,iBAAiB,CAAC0B,IAAI,CAACC,GAAG,CAACZ,mBAAmB,GAAGJ,gBAAgB,EAAEM,kBAAkB,CAAC,CAAC,CAAC;UACnH;UACA;QACF;MACF,KAAK,MAAM;QACT;UACEtB,gBAAgB,CAACuB,aAAa,EAAE1B,KAAK,CAAC;UACtC;QACF;MACF,KAAK,KAAK;QACR;UACEG,gBAAgB,CAACwB,YAAY,EAAE3B,KAAK,CAAC;UACrC;QACF;MACF,KAAK,GAAG;QACN;UACE;UACA;QACF;MACF;QACE;UACE6B,oBAAoB,GAAG,KAAK;QAC9B;IACJ;IACA,IAAIA,oBAAoB,EAAE;MACxB7B,KAAK,CAACuC,cAAc,CAAC,CAAC;IACxB;EACF,CAAC,EAAE,CAAC1E,MAAM,EAAEM,kBAAkB,EAAEgC,gBAAgB,EAAEnC,KAAK,EAAE+B,UAAU,EAAEvB,QAAQ,EAAEgC,iBAAiB,CAAC,CAAC;EAClG,MAAMmC,8BAA8B,GAAGjH,KAAK,CAAC0C,WAAW,CAAC,CAACsC,MAAM,EAAEV,KAAK,KAAK;IAC1E,MAAM4C,kBAAkB,GAAGpG,kCAAkC,CAACqB,MAAM,CAAC;IACrE,IAAI+E,kBAAkB,KAAK,IAAI,EAAE;MAC/B;IACF;IACA,MAAM;MACJxD,KAAK,EAAEyD,YAAY;MACnBvC,KAAK,EAAEwC;IACT,CAAC,GAAGF,kBAAkB;IACtB,MAAM;MACJG,MAAM;MACNzC,KAAK;MACL0C;IACF,CAAC,GAAGtC,MAAM;IACV,MAAMQ,eAAe,GAAG/C,kBAAkB,CAAC,CAAC;IAC5C,MAAMgD,gBAAgB,GAAGtD,MAAM,CAACkB,OAAO,CAACqC,mBAAmB,CAAC,CAAC;IAC7D,MAAMY,eAAe,GAAGnE,MAAM,CAACkB,OAAO,CAACuC,cAAc,CAACuB,YAAY,CAAC;IACnE,MAAMxB,cAAc,GAAGwB,YAAY,GAAGhF,MAAM,CAACkB,OAAO,CAACuC,cAAc,CAACuB,YAAY,CAAC,GAAG,CAAC;IACrF,MAAMtB,mBAAmB,GAAG,CAAC;IAC7B,MAAME,kBAAkB,GAAGP,eAAe,CAACM,MAAM,GAAG,CAAC;IACrD,MAAME,aAAa,GAAG,CAAC;IACvB,MAAMC,YAAY,GAAG5F,oCAAoC,CAAC8B,MAAM,CAAC,CAAC2D,MAAM,GAAG,CAAC;IAC5E,IAAIK,oBAAoB,GAAG,IAAI;IAC/B,QAAQ7B,KAAK,CAAC8B,GAAG;MACf,KAAK,WAAW;QACd;UACE,IAAIxB,KAAK,KAAK0C,QAAQ,GAAG,CAAC,EAAE;YAC1BjD,UAAU,CAACiC,eAAe,EAAEhC,KAAK,CAAC;UACpC,CAAC,MAAM;YACLK,eAAe,CAAC2B,eAAe,EAAEc,YAAY,GAAG,CAAC,EAAE9C,KAAK,CAAC;UAC3D;UACA;QACF;MACF,KAAK,SAAS;QACZ;UACE,IAAIM,KAAK,GAAG,CAAC,EAAE;YACbD,eAAe,CAAC2B,eAAe,EAAEc,YAAY,GAAG,CAAC,EAAE9C,KAAK,CAAC;UAC3D;UACA;QACF;MACF,KAAK,YAAY;QACf;UACE,MAAMiD,qBAAqB,GAAGF,MAAM,CAACvB,MAAM,GAAGuB,MAAM,CAACG,OAAO,CAACL,YAAY,CAAC,GAAG,CAAC;UAC9E,IAAIb,eAAe,GAAGiB,qBAAqB,GAAG,CAAC,IAAItB,YAAY,EAAE;YAC/DtB,eAAe,CAAC2B,eAAe,GAAGiB,qBAAqB,GAAG,CAAC,EAAEH,YAAY,EAAE9C,KAAK,CAAC;UACnF;UACA;QACF;MACF,KAAK,WAAW;QACd;UACE,MAAMmD,oBAAoB,GAAGJ,MAAM,CAACG,OAAO,CAACL,YAAY,CAAC;UACzD,IAAIb,eAAe,GAAGmB,oBAAoB,GAAG,CAAC,IAAIzB,aAAa,EAAE;YAC/DrB,eAAe,CAAC2B,eAAe,GAAGmB,oBAAoB,GAAG,CAAC,EAAEL,YAAY,EAAE9C,KAAK,CAAC;UAClF;UACA;QACF;MACF,KAAK,UAAU;QACb;UACE,IAAIuB,mBAAmB,KAAK,IAAI,IAAIE,kBAAkB,KAAK,IAAI,EAAE;YAC/DjD,QAAQ,CAAC6C,cAAc,EAAEb,iBAAiB,CAAC0B,IAAI,CAACC,GAAG,CAACZ,mBAAmB,GAAGJ,gBAAgB,EAAEM,kBAAkB,CAAC,CAAC,CAAC;UACnH;UACA;QACF;MACF,KAAK,MAAM;QACT;UACEpB,eAAe,CAACqB,aAAa,EAAEoB,YAAY,EAAE9C,KAAK,CAAC;UACnD;QACF;MACF,KAAK,KAAK;QACR;UACEK,eAAe,CAACsB,YAAY,EAAEmB,YAAY,EAAE9C,KAAK,CAAC;UAClD;QACF;MACF,KAAK,GAAG;QACN;UACE;UACA;QACF;MACF;QACE;UACE6B,oBAAoB,GAAG,KAAK;QAC9B;IACJ;IACA,IAAIA,oBAAoB,EAAE;MACxB7B,KAAK,CAACuC,cAAc,CAAC,CAAC;IACxB;EACF,CAAC,EAAE,CAAC1E,MAAM,EAAEM,kBAAkB,EAAE4B,UAAU,EAAEM,eAAe,EAAE7B,QAAQ,EAAEgC,iBAAiB,CAAC,CAAC;EAC1F,MAAM4C,iBAAiB,GAAG1H,KAAK,CAAC0C,WAAW,CAAC,CAACsC,MAAM,EAAEV,KAAK,KAAK;IAC7D;IACA,IAAInD,qBAAqB,CAACmD,KAAK,CAAC,EAAE;MAChC;IACF;;IAEA;IACA,MAAMqD,UAAU,GAAGxF,MAAM,CAACkB,OAAO,CAACuE,aAAa,CAAC5C,MAAM,CAAChB,EAAE,EAAEgB,MAAM,CAACtB,KAAK,CAAC;IACxE,IAAIiE,UAAU,CAACE,QAAQ,KAAKjH,aAAa,CAACkH,IAAI,IAAI,CAACjH,eAAe,CAACyD,KAAK,CAAC8B,GAAG,CAAC,EAAE;MAC7E;IACF;IACA,MAAM2B,cAAc,GAAG5F,MAAM,CAACkB,OAAO,CAAC2E,4BAA4B,CAAC,gBAAgB,EAAE,IAAI,EAAE;MACzF1D,KAAK;MACL2D,IAAI,EAAEN;IACR,CAAC,CAAC;IACF,IAAI,CAACI,cAAc,EAAE;MACnB;IACF;IACA,MAAMvC,eAAe,GAAG/C,kBAAkB,CAAC,CAAC;IAC5C,IAAI+C,eAAe,CAACM,MAAM,KAAK,CAAC,EAAE;MAChC;IACF;IACA,MAAML,gBAAgB,GAAGtD,MAAM,CAACkB,OAAO,CAACqC,mBAAmB,CAAC,CAAC;IAC7D,MAAMwC,gBAAgB,GAAG3F,QAAQ,GAAG,MAAM,CAAC,GAAGJ,MAAM,CAACkB,OAAO,CAACuC,cAAc;IAC3E,MAAMD,cAAc,GAAGX,MAAM,CAACtB,KAAK,GAAGwE,gBAAgB,CAAClD,MAAM,CAACtB,KAAK,CAAC,GAAG,CAAC;IACxE,MAAMyE,cAAc,GAAG3C,eAAe,CAAC1B,SAAS,CAACC,GAAG,IAAIA,GAAG,CAACC,EAAE,KAAKgB,MAAM,CAAChB,EAAE,CAAC;IAC7E,MAAM6B,mBAAmB,GAAG,CAAC;IAC7B,MAAME,kBAAkB,GAAGP,eAAe,CAACM,MAAM,GAAG,CAAC;IACrD,MAAME,aAAa,GAAG,CAAC;IACvB,MAAMoC,cAAc,GAAG7F,QAAQ,GAAG,CAAChB,sBAAsB,CAACY,MAAM,CAACkB,OAAO,CAACM,KAAK,CAAC,CAAC,GAAGtD,oCAAoC,CAAC8B,MAAM,CAAC;IAC/H,MAAM8D,YAAY,GAAGmC,cAAc,CAACtC,MAAM,GAAG,CAAC;IAC9C,IAAIK,oBAAoB,GAAG,IAAI;IAC/B,QAAQ7B,KAAK,CAAC8B,GAAG;MACf,KAAK,WAAW;QACd;UACE;UACA,IAAI+B,cAAc,GAAGpC,kBAAkB,EAAE;YACvCjD,QAAQ,CAAC6C,cAAc,EAAEb,iBAAiB,CAACqD,cAAc,GAAG,CAAC,CAAC,EAAE7F,KAAK,GAAG,OAAO,GAAG,MAAM,EAAE,MAAM,CAAC;UACnG;UACA;QACF;MACF,KAAK,SAAS;QACZ;UACE,IAAI6F,cAAc,GAAGtC,mBAAmB,EAAE;YACxC/C,QAAQ,CAAC6C,cAAc,EAAEb,iBAAiB,CAACqD,cAAc,GAAG,CAAC,CAAC,CAAC;UACjE,CAAC,MAAM,IAAIxF,sBAAsB,EAAE;YACjC8B,gBAAgB,CAACkB,cAAc,EAAErB,KAAK,CAAC;UACzC,CAAC,MAAM;YACLD,UAAU,CAACsB,cAAc,EAAErB,KAAK,CAAC;UACnC;UACA;QACF;MACF,KAAK,YAAY;QACf;UACE,MAAM+B,aAAa,GAAGhF,mBAAmB,CAAC;YACxCiF,eAAe,EAAEX,cAAc;YAC/BK,aAAa;YACbC,YAAY;YACZ3D;UACF,CAAC,CAAC;UACF,IAAI+D,aAAa,KAAK,IAAI,EAAE;YAC1BvD,QAAQ,CAACuD,aAAa,EAAEvB,iBAAiB,CAACqD,cAAc,CAAC,EAAE7F,KAAK,GAAG,MAAM,GAAG,OAAO,CAAC;UACtF;UACA;QACF;MACF,KAAK,WAAW;QACd;UACE,MAAMiE,YAAY,GAAGnF,kBAAkB,CAAC;YACtCkF,eAAe,EAAEX,cAAc;YAC/BK,aAAa;YACbC,YAAY;YACZ3D;UACF,CAAC,CAAC;UACF,IAAIiE,YAAY,KAAK,IAAI,EAAE;YACzBzD,QAAQ,CAACyD,YAAY,EAAEzB,iBAAiB,CAACqD,cAAc,CAAC,EAAE7F,KAAK,GAAG,OAAO,GAAG,MAAM,CAAC;UACrF;UACA;QACF;MACF,KAAK,KAAK;QACR;UACE;UACA,IAAIgC,KAAK,CAAC+D,QAAQ,IAAI1C,cAAc,GAAGK,aAAa,EAAE;YACpDlD,QAAQ,CAAC6C,cAAc,GAAG,CAAC,EAAEb,iBAAiB,CAACqD,cAAc,CAAC,EAAE,MAAM,CAAC;UACzE,CAAC,MAAM,IAAI,CAAC7D,KAAK,CAAC+D,QAAQ,IAAI1C,cAAc,GAAGM,YAAY,EAAE;YAC3DnD,QAAQ,CAAC6C,cAAc,GAAG,CAAC,EAAEb,iBAAiB,CAACqD,cAAc,CAAC,EAAE,OAAO,CAAC;UAC1E;UACA;QACF;MACF,KAAK,GAAG;QACN;UACE,MAAMzE,KAAK,GAAGsB,MAAM,CAACtB,KAAK;UAC1B,IAAIA,KAAK,KAAKvD,8BAA8B,EAAE;YAC5C;UACF;UACA,MAAMmI,MAAM,GAAGtD,MAAM,CAACsD,MAAM;UAC5B,IAAIA,MAAM,KAAKA,MAAM,CAAC5E,KAAK,KAAKxD,6BAA6B,IAAIE,gBAAgB,CAACkI,MAAM,CAAC5E,KAAK,CAAC,CAAC,EAAE;YAChG;UACF;UACA,IAAI,CAACY,KAAK,CAAC+D,QAAQ,IAAIF,cAAc,GAAGpC,kBAAkB,EAAE;YAC1DjD,QAAQ,CAAC6C,cAAc,EAAEb,iBAAiB,CAAC0B,IAAI,CAACC,GAAG,CAAC0B,cAAc,GAAG1C,gBAAgB,EAAEM,kBAAkB,CAAC,CAAC,CAAC;UAC9G;UACA;QACF;MACF,KAAK,UAAU;QACb;UACE,IAAIoC,cAAc,GAAGpC,kBAAkB,EAAE;YACvCjD,QAAQ,CAAC6C,cAAc,EAAEb,iBAAiB,CAAC0B,IAAI,CAACC,GAAG,CAAC0B,cAAc,GAAG1C,gBAAgB,EAAEM,kBAAkB,CAAC,CAAC,CAAC;UAC9G;UACA;QACF;MACF,KAAK,QAAQ;QACX;UACE;UACA,MAAMwC,YAAY,GAAG/B,IAAI,CAACgC,GAAG,CAACL,cAAc,GAAG1C,gBAAgB,EAAEI,mBAAmB,CAAC;UACrF,IAAI0C,YAAY,KAAKJ,cAAc,IAAII,YAAY,IAAI1C,mBAAmB,EAAE;YAC1E/C,QAAQ,CAAC6C,cAAc,EAAEb,iBAAiB,CAACyD,YAAY,CAAC,CAAC;UAC3D,CAAC,MAAM;YACLlE,UAAU,CAACsB,cAAc,EAAErB,KAAK,CAAC;UACnC;UACA;QACF;MACF,KAAK,MAAM;QACT;UACE,IAAIA,KAAK,CAACoC,OAAO,IAAIpC,KAAK,CAACqC,OAAO,IAAIrC,KAAK,CAAC+D,QAAQ,EAAE;YACpDvF,QAAQ,CAACkD,aAAa,EAAElB,iBAAiB,CAACe,mBAAmB,CAAC,CAAC;UACjE,CAAC,MAAM;YACL/C,QAAQ,CAACkD,aAAa,EAAElB,iBAAiB,CAACqD,cAAc,CAAC,CAAC;UAC5D;UACA;QACF;MACF,KAAK,KAAK;QACR;UACE,IAAI7D,KAAK,CAACoC,OAAO,IAAIpC,KAAK,CAACqC,OAAO,IAAIrC,KAAK,CAAC+D,QAAQ,EAAE;YACpDvF,QAAQ,CAACmD,YAAY,EAAEnB,iBAAiB,CAACiB,kBAAkB,CAAC,CAAC;UAC/D,CAAC,MAAM;YACLjD,QAAQ,CAACmD,YAAY,EAAEnB,iBAAiB,CAACqD,cAAc,CAAC,CAAC;UAC3D;UACA;QACF;MACF;QACE;UACEhC,oBAAoB,GAAG,KAAK;QAC9B;IACJ;IACA,IAAIA,oBAAoB,EAAE;MACxB7B,KAAK,CAACuC,cAAc,CAAC,CAAC;IACxB;EACF,CAAC,EAAE,CAAC1E,MAAM,EAAEM,kBAAkB,EAAEH,KAAK,EAAEQ,QAAQ,EAAEgC,iBAAiB,EAAEnC,sBAAsB,EAAE8B,gBAAgB,EAAEJ,UAAU,EAAE9B,QAAQ,CAAC,CAAC;EACpI,MAAMkG,sBAAsB,GAAGzI,KAAK,CAAC0C,WAAW,CAAC,CAACgG,YAAY,EAAE;IAC9DpE;EACF,CAAC,KAAK;IACJ,IAAIA,KAAK,CAAC8B,GAAG,KAAK,GAAG,EAAE;MACrB;MACA,OAAO,KAAK;IACd;IACA,OAAOsC,YAAY;EACrB,CAAC,EAAE,EAAE,CAAC;EACNxH,4BAA4B,CAACiB,MAAM,EAAE,iBAAiB,EAAEsG,sBAAsB,CAAC;EAC/EjI,sBAAsB,CAAC2B,MAAM,EAAE,qBAAqB,EAAE4C,yBAAyB,CAAC;EAChFvE,sBAAsB,CAAC2B,MAAM,EAAE,qBAAqB,EAAE2E,yBAAyB,CAAC;EAChFtG,sBAAsB,CAAC2B,MAAM,EAAE,0BAA0B,EAAE8E,8BAA8B,CAAC;EAC1FzG,sBAAsB,CAAC2B,MAAM,EAAE,aAAa,EAAEuF,iBAAiB,CAAC;AAClE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}