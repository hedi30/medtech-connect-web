{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"selected\", \"rowId\", \"row\", \"index\", \"style\", \"rowHeight\", \"className\", \"visibleColumns\", \"pinnedColumns\", \"offsetLeft\", \"columnsTotalWidth\", \"firstColumnIndex\", \"lastColumnIndex\", \"focusedColumnIndex\", \"isFirstVisible\", \"isLastVisible\", \"isNotVisible\", \"showBottomBorder\", \"scrollbarWidth\", \"gridHasFiller\", \"onClick\", \"onDoubleClick\", \"onMouseEnter\", \"onMouseLeave\", \"onMouseOut\", \"onMouseOver\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { fastMemo } from '@mui/x-internals/fastMemo';\nimport { forwardRef } from '@mui/x-internals/forwardRef';\nimport { isObjectEmpty } from '@mui/x-internals/isObjectEmpty';\nimport { GridEditModes, GridCellModes } from \"../models/gridEditRowModel.js\";\nimport { gridClasses } from \"../constants/gridClasses.js\";\nimport { composeGridClasses } from \"../utils/composeGridClasses.js\";\nimport { useGridRootProps } from \"../hooks/utils/useGridRootProps.js\";\nimport { shouldCellShowLeftBorder, shouldCellShowRightBorder } from \"../utils/cellBorderUtils.js\";\nimport { gridColumnPositionsSelector } from \"../hooks/features/columns/gridColumnsSelector.js\";\nimport { useGridSelector, objectShallowCompare, useGridSelectorV8 } from \"../hooks/utils/useGridSelector.js\";\nimport { useGridVisibleRows } from \"../hooks/utils/useGridVisibleRows.js\";\nimport { findParentElementFromClassName, isEventTargetInPortal } from \"../utils/domUtils.js\";\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from \"../colDef/gridCheckboxSelectionColDef.js\";\nimport { GRID_ACTIONS_COLUMN_TYPE } from \"../colDef/gridActionsColDef.js\";\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD, PinnedColumnPosition } from \"../internals/constants.js\";\nimport { gridSortModelSelector } from \"../hooks/features/sorting/gridSortingSelector.js\";\nimport { gridRowMaximumTreeDepthSelector } from \"../hooks/features/rows/gridRowsSelector.js\";\nimport { gridEditRowsStateSelector, gridRowIsEditingSelector } from \"../hooks/features/editing/gridEditingSelectors.js\";\nimport { GridScrollbarFillerCell as ScrollbarFiller } from \"./GridScrollbarFillerCell.js\";\nimport { getPinnedCellOffset } from \"../internals/utils/getPinnedCellOffset.js\";\nimport { useGridConfiguration } from \"../hooks/utils/useGridConfiguration.js\";\nimport { useGridPrivateApiContext } from \"../hooks/utils/useGridPrivateApiContext.js\";\nimport { createSelectorV8 } from \"../utils/createSelector.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst isRowReorderingEnabledSelector = createSelectorV8(gridEditRowsStateSelector, (editRows, rowReordering) => {\n  if (!rowReordering) {\n    return false;\n  }\n  const isEditingRows = !isObjectEmpty(editRows);\n  return !isEditingRows;\n});\nconst GridRow = forwardRef(function GridRow(props, refProp) {\n  const {\n      selected,\n      rowId,\n      row,\n      index,\n      style: styleProp,\n      rowHeight,\n      className,\n      visibleColumns,\n      pinnedColumns,\n      offsetLeft,\n      columnsTotalWidth,\n      firstColumnIndex,\n      lastColumnIndex,\n      focusedColumnIndex,\n      isFirstVisible,\n      isLastVisible,\n      isNotVisible,\n      showBottomBorder,\n      scrollbarWidth,\n      gridHasFiller,\n      onClick,\n      onDoubleClick,\n      onMouseEnter,\n      onMouseLeave,\n      onMouseOut,\n      onMouseOver\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const apiRef = useGridPrivateApiContext();\n  const configuration = useGridConfiguration();\n  const ref = React.useRef(null);\n  const rootProps = useGridRootProps();\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const sortModel = useGridSelector(apiRef, gridSortModelSelector);\n  const treeDepth = useGridSelector(apiRef, gridRowMaximumTreeDepthSelector);\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const rowReordering = rootProps.rowReordering;\n  const isRowReorderingEnabled = useGridSelectorV8(apiRef, isRowReorderingEnabledSelector, rowReordering);\n  const handleRef = useForkRef(ref, refProp);\n  const rowNode = apiRef.current.getRowNode(rowId);\n  const editing = useGridSelectorV8(apiRef, gridRowIsEditingSelector, {\n    rowId,\n    editMode: rootProps.editMode\n  });\n  const editable = rootProps.editMode === GridEditModes.Row;\n  const hasFocusCell = focusedColumnIndex !== undefined;\n  const hasVirtualFocusCellLeft = hasFocusCell && focusedColumnIndex >= pinnedColumns.left.length && focusedColumnIndex < firstColumnIndex;\n  const hasVirtualFocusCellRight = hasFocusCell && focusedColumnIndex < visibleColumns.length - pinnedColumns.right.length && focusedColumnIndex >= lastColumnIndex;\n  const classes = composeGridClasses(rootProps.classes, {\n    root: ['row', selected && 'selected', editable && 'row--editable', editing && 'row--editing', isFirstVisible && 'row--firstVisible', isLastVisible && 'row--lastVisible', showBottomBorder && 'row--borderBottom', rowHeight === 'auto' && 'row--dynamicHeight']\n  });\n  const getRowAriaAttributes = configuration.hooks.useGridRowAriaAttributes();\n  React.useLayoutEffect(() => {\n    if (currentPage.range) {\n      const rowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(rowId);\n      // Pinned rows are not part of the visible rows\n      if (rowIndex !== undefined) {\n        apiRef.current.unstable_setLastMeasuredRowIndex(rowIndex);\n      }\n    }\n    if (ref.current && rowHeight === 'auto') {\n      return apiRef.current.observeRowHeight(ref.current, rowId);\n    }\n    return undefined;\n  }, [apiRef, currentPage.range, rowHeight, rowId]);\n  const publish = React.useCallback((eventName, propHandler) => event => {\n    // Ignore portal\n    if (isEventTargetInPortal(event)) {\n      return;\n    }\n\n    // The row might have been deleted\n    if (!apiRef.current.getRow(rowId)) {\n      return;\n    }\n    apiRef.current.publishEvent(eventName, apiRef.current.getRowParams(rowId), event);\n    if (propHandler) {\n      propHandler(event);\n    }\n  }, [apiRef, rowId]);\n  const publishClick = React.useCallback(event => {\n    const cell = findParentElementFromClassName(event.target, gridClasses.cell);\n    const field = cell?.getAttribute('data-field');\n\n    // Check if the field is available because the cell that fills the empty\n    // space of the row has no field.\n    if (field) {\n      // User clicked in the checkbox added by checkboxSelection\n      if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n        return;\n      }\n\n      // User opened a detail panel\n      if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n        return;\n      }\n\n      // User reorders a row\n      if (field === '__reorder__') {\n        return;\n      }\n\n      // User is editing a cell\n      if (apiRef.current.getCellMode(rowId, field) === GridCellModes.Edit) {\n        return;\n      }\n\n      // User clicked a button from the \"actions\" column type\n      const column = apiRef.current.getColumn(field);\n      if (column?.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n    publish('rowClick', onClick)(event);\n  }, [apiRef, onClick, publish, rowId]);\n  const {\n    slots,\n    slotProps,\n    disableColumnReorder\n  } = rootProps;\n  const heightEntry = useGridSelector(apiRef, () => _extends({}, apiRef.current.getRowHeightEntry(rowId)), objectShallowCompare);\n  const style = React.useMemo(() => {\n    if (isNotVisible) {\n      return {\n        opacity: 0,\n        width: 0,\n        height: 0\n      };\n    }\n    const rowStyle = _extends({}, styleProp, {\n      maxHeight: rowHeight === 'auto' ? 'none' : rowHeight,\n      // max-height doesn't support \"auto\"\n      minHeight: rowHeight,\n      '--height': typeof rowHeight === 'number' ? `${rowHeight}px` : rowHeight\n    });\n    if (heightEntry.spacingTop) {\n      const property = rootProps.rowSpacingType === 'border' ? 'borderTopWidth' : 'marginTop';\n      rowStyle[property] = heightEntry.spacingTop;\n    }\n    if (heightEntry.spacingBottom) {\n      const property = rootProps.rowSpacingType === 'border' ? 'borderBottomWidth' : 'marginBottom';\n      let propertyValue = rowStyle[property];\n      // avoid overriding existing value\n      if (typeof propertyValue !== 'number') {\n        propertyValue = parseInt(propertyValue || '0', 10);\n      }\n      propertyValue += heightEntry.spacingBottom;\n      rowStyle[property] = propertyValue;\n    }\n    return rowStyle;\n  }, [isNotVisible, rowHeight, styleProp, heightEntry, rootProps.rowSpacingType]);\n  const rowClassNames = apiRef.current.unstable_applyPipeProcessors('rowClassName', [], rowId);\n  const ariaAttributes = rowNode ? getRowAriaAttributes(rowNode, index) : undefined;\n  if (typeof rootProps.getRowClassName === 'function') {\n    const indexRelativeToCurrentPage = index - (currentPage.range?.firstRowIndex || 0);\n    const rowParams = _extends({}, apiRef.current.getRowParams(rowId), {\n      isFirstVisible: indexRelativeToCurrentPage === 0,\n      isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n      indexRelativeToCurrentPage\n    });\n    rowClassNames.push(rootProps.getRowClassName(rowParams));\n  }\n\n  /* Start of rendering */\n  if (!rowNode) {\n    return null;\n  }\n  const getCell = (column, indexInSection, indexRelativeToAllColumns, sectionLength, pinnedPosition = PinnedColumnPosition.NONE) => {\n    const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, indexRelativeToAllColumns);\n    if (cellColSpanInfo?.spannedByColSpan) {\n      return null;\n    }\n    const width = cellColSpanInfo?.cellProps.width ?? column.computedWidth;\n    const colSpan = cellColSpanInfo?.cellProps.colSpan ?? 1;\n    const pinnedOffset = getPinnedCellOffset(pinnedPosition, column.computedWidth, indexRelativeToAllColumns, columnPositions, columnsTotalWidth, scrollbarWidth);\n    if (rowNode?.type === 'skeletonRow') {\n      return /*#__PURE__*/_jsx(slots.skeletonCell, {\n        type: column.type,\n        width: width,\n        height: rowHeight,\n        field: column.field,\n        align: column.align\n      }, column.field);\n    }\n\n    // when the cell is a reorder cell we are not allowing to reorder the col\n    // fixes https://github.com/mui/mui-x/issues/11126\n    const isReorderCell = column.field === '__reorder__';\n    const canReorderColumn = !(disableColumnReorder || column.disableReorder);\n    const canReorderRow = isRowReorderingEnabled && !sortModel.length && treeDepth <= 1;\n    const disableDragEvents = !(canReorderColumn || isReorderCell && canReorderRow);\n    const cellIsNotVisible = pinnedPosition === PinnedColumnPosition.VIRTUAL;\n    const showLeftBorder = shouldCellShowLeftBorder(pinnedPosition, indexInSection);\n    const showRightBorder = shouldCellShowRightBorder(pinnedPosition, indexInSection, sectionLength, rootProps.showCellVerticalBorder, gridHasFiller);\n    return /*#__PURE__*/_jsx(slots.cell, _extends({\n      column: column,\n      width: width,\n      rowId: rowId,\n      align: column.align || 'left',\n      colIndex: indexRelativeToAllColumns,\n      colSpan: colSpan,\n      disableDragEvents: disableDragEvents,\n      isNotVisible: cellIsNotVisible,\n      pinnedOffset: pinnedOffset,\n      pinnedPosition: pinnedPosition,\n      showLeftBorder: showLeftBorder,\n      showRightBorder: showRightBorder,\n      row: row,\n      rowNode: rowNode\n    }, slotProps?.cell), column.field);\n  };\n  const leftCells = pinnedColumns.left.map((column, i) => {\n    const indexRelativeToAllColumns = i;\n    return getCell(column, i, indexRelativeToAllColumns, pinnedColumns.left.length, PinnedColumnPosition.LEFT);\n  });\n  const rightCells = pinnedColumns.right.map((column, i) => {\n    const indexRelativeToAllColumns = visibleColumns.length - pinnedColumns.right.length + i;\n    return getCell(column, i, indexRelativeToAllColumns, pinnedColumns.right.length, PinnedColumnPosition.RIGHT);\n  });\n  const middleColumnsLength = visibleColumns.length - pinnedColumns.left.length - pinnedColumns.right.length;\n  const cells = [];\n  if (hasVirtualFocusCellLeft) {\n    cells.push(getCell(visibleColumns[focusedColumnIndex], focusedColumnIndex - pinnedColumns.left.length, focusedColumnIndex, middleColumnsLength, PinnedColumnPosition.VIRTUAL));\n  }\n  for (let i = firstColumnIndex; i < lastColumnIndex; i += 1) {\n    const column = visibleColumns[i];\n    const indexInSection = i - pinnedColumns.left.length;\n    if (!column) {\n      continue;\n    }\n    cells.push(getCell(column, indexInSection, i, middleColumnsLength));\n  }\n  if (hasVirtualFocusCellRight) {\n    cells.push(getCell(visibleColumns[focusedColumnIndex], focusedColumnIndex - pinnedColumns.left.length, focusedColumnIndex, middleColumnsLength, PinnedColumnPosition.VIRTUAL));\n  }\n  const eventHandlers = row ? {\n    onClick: publishClick,\n    onDoubleClick: publish('rowDoubleClick', onDoubleClick),\n    onMouseEnter: publish('rowMouseEnter', onMouseEnter),\n    onMouseLeave: publish('rowMouseLeave', onMouseLeave),\n    onMouseOut: publish('rowMouseOut', onMouseOut),\n    onMouseOver: publish('rowMouseOver', onMouseOver)\n  } : null;\n  return /*#__PURE__*/_jsxs(\"div\", _extends({\n    \"data-id\": rowId,\n    \"data-rowindex\": index,\n    role: \"row\",\n    className: clsx(...rowClassNames, classes.root, className),\n    style: style\n  }, ariaAttributes, eventHandlers, other, {\n    ref: handleRef,\n    children: [leftCells, /*#__PURE__*/_jsx(\"div\", {\n      role: \"presentation\",\n      className: gridClasses.cellOffsetLeft,\n      style: {\n        width: offsetLeft\n      }\n    }), cells, /*#__PURE__*/_jsx(\"div\", {\n      role: \"presentation\",\n      className: clsx(gridClasses.cell, gridClasses.cellEmpty)\n    }), rightCells, scrollbarWidth !== 0 && /*#__PURE__*/_jsx(ScrollbarFiller, {\n      pinnedRight: pinnedColumns.right.length > 0,\n      borderTop: !isFirstVisible\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? GridRow.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  columnsTotalWidth: PropTypes.number.isRequired,\n  firstColumnIndex: PropTypes.number.isRequired,\n  /**\n   * Determines which cell has focus.\n   * If `null`, no cell in this row has focus.\n   */\n  focusedColumnIndex: PropTypes.number,\n  gridHasFiller: PropTypes.bool.isRequired,\n  /**\n   * Index of the row in the whole sorted and filtered dataset.\n   * If some rows above have expanded children, this index also take those children into account.\n   */\n  index: PropTypes.number.isRequired,\n  isFirstVisible: PropTypes.bool.isRequired,\n  isLastVisible: PropTypes.bool.isRequired,\n  isNotVisible: PropTypes.bool.isRequired,\n  lastColumnIndex: PropTypes.number.isRequired,\n  offsetLeft: PropTypes.number.isRequired,\n  onClick: PropTypes.func,\n  onDoubleClick: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  pinnedColumns: PropTypes.object.isRequired,\n  row: PropTypes.object.isRequired,\n  rowHeight: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number]).isRequired,\n  rowId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  scrollbarWidth: PropTypes.number.isRequired,\n  selected: PropTypes.bool.isRequired,\n  showBottomBorder: PropTypes.bool.isRequired,\n  visibleColumns: PropTypes.arrayOf(PropTypes.object).isRequired\n} : void 0;\nconst MemoizedGridRow = fastMemo(GridRow);\nexport { MemoizedGridRow as GridRow };","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","clsx","unstable_useForkRef","useForkRef","fastMemo","forwardRef","isObjectEmpty","GridEditModes","GridCellModes","gridClasses","composeGridClasses","useGridRootProps","shouldCellShowLeftBorder","shouldCellShowRightBorder","gridColumnPositionsSelector","useGridSelector","objectShallowCompare","useGridSelectorV8","useGridVisibleRows","findParentElementFromClassName","isEventTargetInPortal","GRID_CHECKBOX_SELECTION_COL_DEF","GRID_ACTIONS_COLUMN_TYPE","GRID_DETAIL_PANEL_TOGGLE_FIELD","PinnedColumnPosition","gridSortModelSelector","gridRowMaximumTreeDepthSelector","gridEditRowsStateSelector","gridRowIsEditingSelector","GridScrollbarFillerCell","ScrollbarFiller","getPinnedCellOffset","useGridConfiguration","useGridPrivateApiContext","createSelectorV8","jsx","_jsx","jsxs","_jsxs","isRowReorderingEnabledSelector","editRows","rowReordering","isEditingRows","GridRow","props","refProp","selected","rowId","row","index","style","styleProp","rowHeight","className","visibleColumns","pinnedColumns","offsetLeft","columnsTotalWidth","firstColumnIndex","lastColumnIndex","focusedColumnIndex","isFirstVisible","isLastVisible","isNotVisible","showBottomBorder","scrollbarWidth","gridHasFiller","onClick","onDoubleClick","onMouseEnter","onMouseLeave","onMouseOut","onMouseOver","other","apiRef","configuration","ref","useRef","rootProps","currentPage","sortModel","treeDepth","columnPositions","isRowReorderingEnabled","handleRef","rowNode","current","getRowNode","editing","editMode","editable","Row","hasFocusCell","undefined","hasVirtualFocusCellLeft","left","length","hasVirtualFocusCellRight","right","classes","root","getRowAriaAttributes","hooks","useGridRowAriaAttributes","useLayoutEffect","range","rowIndex","getRowIndexRelativeToVisibleRows","unstable_setLastMeasuredRowIndex","observeRowHeight","publish","useCallback","eventName","propHandler","event","getRow","publishEvent","getRowParams","publishClick","cell","target","field","getAttribute","getCellMode","Edit","column","getColumn","type","slots","slotProps","disableColumnReorder","heightEntry","getRowHeightEntry","useMemo","opacity","width","height","rowStyle","maxHeight","minHeight","spacingTop","property","rowSpacingType","spacingBottom","propertyValue","parseInt","rowClassNames","unstable_applyPipeProcessors","ariaAttributes","getRowClassName","indexRelativeToCurrentPage","firstRowIndex","rowParams","rows","push","getCell","indexInSection","indexRelativeToAllColumns","sectionLength","pinnedPosition","NONE","cellColSpanInfo","unstable_getCellColSpanInfo","spannedByColSpan","cellProps","computedWidth","colSpan","pinnedOffset","skeletonCell","align","isReorderCell","canReorderColumn","disableReorder","canReorderRow","disableDragEvents","cellIsNotVisible","VIRTUAL","showLeftBorder","showRightBorder","showCellVerticalBorder","colIndex","leftCells","map","i","LEFT","rightCells","RIGHT","middleColumnsLength","cells","eventHandlers","role","children","cellOffsetLeft","cellEmpty","pinnedRight","borderTop","process","env","NODE_ENV","propTypes","number","isRequired","bool","func","object","oneOfType","oneOf","string","arrayOf","MemoizedGridRow"],"sources":["/home/asma/dev/medtech-connect-web/Medtech-connect/frontend/node_modules/@mui/x-data-grid/components/GridRow.js"],"sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"selected\", \"rowId\", \"row\", \"index\", \"style\", \"rowHeight\", \"className\", \"visibleColumns\", \"pinnedColumns\", \"offsetLeft\", \"columnsTotalWidth\", \"firstColumnIndex\", \"lastColumnIndex\", \"focusedColumnIndex\", \"isFirstVisible\", \"isLastVisible\", \"isNotVisible\", \"showBottomBorder\", \"scrollbarWidth\", \"gridHasFiller\", \"onClick\", \"onDoubleClick\", \"onMouseEnter\", \"onMouseLeave\", \"onMouseOut\", \"onMouseOver\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { fastMemo } from '@mui/x-internals/fastMemo';\nimport { forwardRef } from '@mui/x-internals/forwardRef';\nimport { isObjectEmpty } from '@mui/x-internals/isObjectEmpty';\nimport { GridEditModes, GridCellModes } from \"../models/gridEditRowModel.js\";\nimport { gridClasses } from \"../constants/gridClasses.js\";\nimport { composeGridClasses } from \"../utils/composeGridClasses.js\";\nimport { useGridRootProps } from \"../hooks/utils/useGridRootProps.js\";\nimport { shouldCellShowLeftBorder, shouldCellShowRightBorder } from \"../utils/cellBorderUtils.js\";\nimport { gridColumnPositionsSelector } from \"../hooks/features/columns/gridColumnsSelector.js\";\nimport { useGridSelector, objectShallowCompare, useGridSelectorV8 } from \"../hooks/utils/useGridSelector.js\";\nimport { useGridVisibleRows } from \"../hooks/utils/useGridVisibleRows.js\";\nimport { findParentElementFromClassName, isEventTargetInPortal } from \"../utils/domUtils.js\";\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from \"../colDef/gridCheckboxSelectionColDef.js\";\nimport { GRID_ACTIONS_COLUMN_TYPE } from \"../colDef/gridActionsColDef.js\";\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD, PinnedColumnPosition } from \"../internals/constants.js\";\nimport { gridSortModelSelector } from \"../hooks/features/sorting/gridSortingSelector.js\";\nimport { gridRowMaximumTreeDepthSelector } from \"../hooks/features/rows/gridRowsSelector.js\";\nimport { gridEditRowsStateSelector, gridRowIsEditingSelector } from \"../hooks/features/editing/gridEditingSelectors.js\";\nimport { GridScrollbarFillerCell as ScrollbarFiller } from \"./GridScrollbarFillerCell.js\";\nimport { getPinnedCellOffset } from \"../internals/utils/getPinnedCellOffset.js\";\nimport { useGridConfiguration } from \"../hooks/utils/useGridConfiguration.js\";\nimport { useGridPrivateApiContext } from \"../hooks/utils/useGridPrivateApiContext.js\";\nimport { createSelectorV8 } from \"../utils/createSelector.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst isRowReorderingEnabledSelector = createSelectorV8(gridEditRowsStateSelector, (editRows, rowReordering) => {\n  if (!rowReordering) {\n    return false;\n  }\n  const isEditingRows = !isObjectEmpty(editRows);\n  return !isEditingRows;\n});\nconst GridRow = forwardRef(function GridRow(props, refProp) {\n  const {\n      selected,\n      rowId,\n      row,\n      index,\n      style: styleProp,\n      rowHeight,\n      className,\n      visibleColumns,\n      pinnedColumns,\n      offsetLeft,\n      columnsTotalWidth,\n      firstColumnIndex,\n      lastColumnIndex,\n      focusedColumnIndex,\n      isFirstVisible,\n      isLastVisible,\n      isNotVisible,\n      showBottomBorder,\n      scrollbarWidth,\n      gridHasFiller,\n      onClick,\n      onDoubleClick,\n      onMouseEnter,\n      onMouseLeave,\n      onMouseOut,\n      onMouseOver\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const apiRef = useGridPrivateApiContext();\n  const configuration = useGridConfiguration();\n  const ref = React.useRef(null);\n  const rootProps = useGridRootProps();\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const sortModel = useGridSelector(apiRef, gridSortModelSelector);\n  const treeDepth = useGridSelector(apiRef, gridRowMaximumTreeDepthSelector);\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const rowReordering = rootProps.rowReordering;\n  const isRowReorderingEnabled = useGridSelectorV8(apiRef, isRowReorderingEnabledSelector, rowReordering);\n  const handleRef = useForkRef(ref, refProp);\n  const rowNode = apiRef.current.getRowNode(rowId);\n  const editing = useGridSelectorV8(apiRef, gridRowIsEditingSelector, {\n    rowId,\n    editMode: rootProps.editMode\n  });\n  const editable = rootProps.editMode === GridEditModes.Row;\n  const hasFocusCell = focusedColumnIndex !== undefined;\n  const hasVirtualFocusCellLeft = hasFocusCell && focusedColumnIndex >= pinnedColumns.left.length && focusedColumnIndex < firstColumnIndex;\n  const hasVirtualFocusCellRight = hasFocusCell && focusedColumnIndex < visibleColumns.length - pinnedColumns.right.length && focusedColumnIndex >= lastColumnIndex;\n  const classes = composeGridClasses(rootProps.classes, {\n    root: ['row', selected && 'selected', editable && 'row--editable', editing && 'row--editing', isFirstVisible && 'row--firstVisible', isLastVisible && 'row--lastVisible', showBottomBorder && 'row--borderBottom', rowHeight === 'auto' && 'row--dynamicHeight']\n  });\n  const getRowAriaAttributes = configuration.hooks.useGridRowAriaAttributes();\n  React.useLayoutEffect(() => {\n    if (currentPage.range) {\n      const rowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(rowId);\n      // Pinned rows are not part of the visible rows\n      if (rowIndex !== undefined) {\n        apiRef.current.unstable_setLastMeasuredRowIndex(rowIndex);\n      }\n    }\n    if (ref.current && rowHeight === 'auto') {\n      return apiRef.current.observeRowHeight(ref.current, rowId);\n    }\n    return undefined;\n  }, [apiRef, currentPage.range, rowHeight, rowId]);\n  const publish = React.useCallback((eventName, propHandler) => event => {\n    // Ignore portal\n    if (isEventTargetInPortal(event)) {\n      return;\n    }\n\n    // The row might have been deleted\n    if (!apiRef.current.getRow(rowId)) {\n      return;\n    }\n    apiRef.current.publishEvent(eventName, apiRef.current.getRowParams(rowId), event);\n    if (propHandler) {\n      propHandler(event);\n    }\n  }, [apiRef, rowId]);\n  const publishClick = React.useCallback(event => {\n    const cell = findParentElementFromClassName(event.target, gridClasses.cell);\n    const field = cell?.getAttribute('data-field');\n\n    // Check if the field is available because the cell that fills the empty\n    // space of the row has no field.\n    if (field) {\n      // User clicked in the checkbox added by checkboxSelection\n      if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n        return;\n      }\n\n      // User opened a detail panel\n      if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n        return;\n      }\n\n      // User reorders a row\n      if (field === '__reorder__') {\n        return;\n      }\n\n      // User is editing a cell\n      if (apiRef.current.getCellMode(rowId, field) === GridCellModes.Edit) {\n        return;\n      }\n\n      // User clicked a button from the \"actions\" column type\n      const column = apiRef.current.getColumn(field);\n      if (column?.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n    publish('rowClick', onClick)(event);\n  }, [apiRef, onClick, publish, rowId]);\n  const {\n    slots,\n    slotProps,\n    disableColumnReorder\n  } = rootProps;\n  const heightEntry = useGridSelector(apiRef, () => _extends({}, apiRef.current.getRowHeightEntry(rowId)), objectShallowCompare);\n  const style = React.useMemo(() => {\n    if (isNotVisible) {\n      return {\n        opacity: 0,\n        width: 0,\n        height: 0\n      };\n    }\n    const rowStyle = _extends({}, styleProp, {\n      maxHeight: rowHeight === 'auto' ? 'none' : rowHeight,\n      // max-height doesn't support \"auto\"\n      minHeight: rowHeight,\n      '--height': typeof rowHeight === 'number' ? `${rowHeight}px` : rowHeight\n    });\n    if (heightEntry.spacingTop) {\n      const property = rootProps.rowSpacingType === 'border' ? 'borderTopWidth' : 'marginTop';\n      rowStyle[property] = heightEntry.spacingTop;\n    }\n    if (heightEntry.spacingBottom) {\n      const property = rootProps.rowSpacingType === 'border' ? 'borderBottomWidth' : 'marginBottom';\n      let propertyValue = rowStyle[property];\n      // avoid overriding existing value\n      if (typeof propertyValue !== 'number') {\n        propertyValue = parseInt(propertyValue || '0', 10);\n      }\n      propertyValue += heightEntry.spacingBottom;\n      rowStyle[property] = propertyValue;\n    }\n    return rowStyle;\n  }, [isNotVisible, rowHeight, styleProp, heightEntry, rootProps.rowSpacingType]);\n  const rowClassNames = apiRef.current.unstable_applyPipeProcessors('rowClassName', [], rowId);\n  const ariaAttributes = rowNode ? getRowAriaAttributes(rowNode, index) : undefined;\n  if (typeof rootProps.getRowClassName === 'function') {\n    const indexRelativeToCurrentPage = index - (currentPage.range?.firstRowIndex || 0);\n    const rowParams = _extends({}, apiRef.current.getRowParams(rowId), {\n      isFirstVisible: indexRelativeToCurrentPage === 0,\n      isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n      indexRelativeToCurrentPage\n    });\n    rowClassNames.push(rootProps.getRowClassName(rowParams));\n  }\n\n  /* Start of rendering */\n  if (!rowNode) {\n    return null;\n  }\n  const getCell = (column, indexInSection, indexRelativeToAllColumns, sectionLength, pinnedPosition = PinnedColumnPosition.NONE) => {\n    const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, indexRelativeToAllColumns);\n    if (cellColSpanInfo?.spannedByColSpan) {\n      return null;\n    }\n    const width = cellColSpanInfo?.cellProps.width ?? column.computedWidth;\n    const colSpan = cellColSpanInfo?.cellProps.colSpan ?? 1;\n    const pinnedOffset = getPinnedCellOffset(pinnedPosition, column.computedWidth, indexRelativeToAllColumns, columnPositions, columnsTotalWidth, scrollbarWidth);\n    if (rowNode?.type === 'skeletonRow') {\n      return /*#__PURE__*/_jsx(slots.skeletonCell, {\n        type: column.type,\n        width: width,\n        height: rowHeight,\n        field: column.field,\n        align: column.align\n      }, column.field);\n    }\n\n    // when the cell is a reorder cell we are not allowing to reorder the col\n    // fixes https://github.com/mui/mui-x/issues/11126\n    const isReorderCell = column.field === '__reorder__';\n    const canReorderColumn = !(disableColumnReorder || column.disableReorder);\n    const canReorderRow = isRowReorderingEnabled && !sortModel.length && treeDepth <= 1;\n    const disableDragEvents = !(canReorderColumn || isReorderCell && canReorderRow);\n    const cellIsNotVisible = pinnedPosition === PinnedColumnPosition.VIRTUAL;\n    const showLeftBorder = shouldCellShowLeftBorder(pinnedPosition, indexInSection);\n    const showRightBorder = shouldCellShowRightBorder(pinnedPosition, indexInSection, sectionLength, rootProps.showCellVerticalBorder, gridHasFiller);\n    return /*#__PURE__*/_jsx(slots.cell, _extends({\n      column: column,\n      width: width,\n      rowId: rowId,\n      align: column.align || 'left',\n      colIndex: indexRelativeToAllColumns,\n      colSpan: colSpan,\n      disableDragEvents: disableDragEvents,\n      isNotVisible: cellIsNotVisible,\n      pinnedOffset: pinnedOffset,\n      pinnedPosition: pinnedPosition,\n      showLeftBorder: showLeftBorder,\n      showRightBorder: showRightBorder,\n      row: row,\n      rowNode: rowNode\n    }, slotProps?.cell), column.field);\n  };\n  const leftCells = pinnedColumns.left.map((column, i) => {\n    const indexRelativeToAllColumns = i;\n    return getCell(column, i, indexRelativeToAllColumns, pinnedColumns.left.length, PinnedColumnPosition.LEFT);\n  });\n  const rightCells = pinnedColumns.right.map((column, i) => {\n    const indexRelativeToAllColumns = visibleColumns.length - pinnedColumns.right.length + i;\n    return getCell(column, i, indexRelativeToAllColumns, pinnedColumns.right.length, PinnedColumnPosition.RIGHT);\n  });\n  const middleColumnsLength = visibleColumns.length - pinnedColumns.left.length - pinnedColumns.right.length;\n  const cells = [];\n  if (hasVirtualFocusCellLeft) {\n    cells.push(getCell(visibleColumns[focusedColumnIndex], focusedColumnIndex - pinnedColumns.left.length, focusedColumnIndex, middleColumnsLength, PinnedColumnPosition.VIRTUAL));\n  }\n  for (let i = firstColumnIndex; i < lastColumnIndex; i += 1) {\n    const column = visibleColumns[i];\n    const indexInSection = i - pinnedColumns.left.length;\n    if (!column) {\n      continue;\n    }\n    cells.push(getCell(column, indexInSection, i, middleColumnsLength));\n  }\n  if (hasVirtualFocusCellRight) {\n    cells.push(getCell(visibleColumns[focusedColumnIndex], focusedColumnIndex - pinnedColumns.left.length, focusedColumnIndex, middleColumnsLength, PinnedColumnPosition.VIRTUAL));\n  }\n  const eventHandlers = row ? {\n    onClick: publishClick,\n    onDoubleClick: publish('rowDoubleClick', onDoubleClick),\n    onMouseEnter: publish('rowMouseEnter', onMouseEnter),\n    onMouseLeave: publish('rowMouseLeave', onMouseLeave),\n    onMouseOut: publish('rowMouseOut', onMouseOut),\n    onMouseOver: publish('rowMouseOver', onMouseOver)\n  } : null;\n  return /*#__PURE__*/_jsxs(\"div\", _extends({\n    \"data-id\": rowId,\n    \"data-rowindex\": index,\n    role: \"row\",\n    className: clsx(...rowClassNames, classes.root, className),\n    style: style\n  }, ariaAttributes, eventHandlers, other, {\n    ref: handleRef,\n    children: [leftCells, /*#__PURE__*/_jsx(\"div\", {\n      role: \"presentation\",\n      className: gridClasses.cellOffsetLeft,\n      style: {\n        width: offsetLeft\n      }\n    }), cells, /*#__PURE__*/_jsx(\"div\", {\n      role: \"presentation\",\n      className: clsx(gridClasses.cell, gridClasses.cellEmpty)\n    }), rightCells, scrollbarWidth !== 0 && /*#__PURE__*/_jsx(ScrollbarFiller, {\n      pinnedRight: pinnedColumns.right.length > 0,\n      borderTop: !isFirstVisible\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? GridRow.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  columnsTotalWidth: PropTypes.number.isRequired,\n  firstColumnIndex: PropTypes.number.isRequired,\n  /**\n   * Determines which cell has focus.\n   * If `null`, no cell in this row has focus.\n   */\n  focusedColumnIndex: PropTypes.number,\n  gridHasFiller: PropTypes.bool.isRequired,\n  /**\n   * Index of the row in the whole sorted and filtered dataset.\n   * If some rows above have expanded children, this index also take those children into account.\n   */\n  index: PropTypes.number.isRequired,\n  isFirstVisible: PropTypes.bool.isRequired,\n  isLastVisible: PropTypes.bool.isRequired,\n  isNotVisible: PropTypes.bool.isRequired,\n  lastColumnIndex: PropTypes.number.isRequired,\n  offsetLeft: PropTypes.number.isRequired,\n  onClick: PropTypes.func,\n  onDoubleClick: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  pinnedColumns: PropTypes.object.isRequired,\n  row: PropTypes.object.isRequired,\n  rowHeight: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number]).isRequired,\n  rowId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  scrollbarWidth: PropTypes.number.isRequired,\n  selected: PropTypes.bool.isRequired,\n  showBottomBorder: PropTypes.bool.isRequired,\n  visibleColumns: PropTypes.arrayOf(PropTypes.object).isRequired\n} : void 0;\nconst MemoizedGridRow = fastMemo(GridRow);\nexport { MemoizedGridRow as GridRow };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}