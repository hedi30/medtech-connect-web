{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_ownerDocument as ownerDocument, unstable_useEnhancedEffect as useEnhancedEffect, unstable_useEventCallback as useEventCallback, unstable_ownerWindow as ownerWindow } from '@mui/utils';\nimport { throttle } from '@mui/x-internals/throttle';\nimport { useGridApiOptionHandler } from \"../../utils/useGridApiEventHandler.js\";\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { createSelector } from \"../../../utils/createSelector.js\";\nimport { useGridLogger } from \"../../utils/useGridLogger.js\";\nimport { gridColumnPositionsSelector, gridVisibleColumnDefinitionsSelector, gridVisiblePinnedColumnDefinitionsSelector } from \"../columns/index.js\";\nimport { gridDimensionsSelector } from \"./gridDimensionsSelectors.js\";\nimport { gridDensityFactorSelector } from \"../density/index.js\";\nimport { gridRenderContextSelector } from \"../virtualization/index.js\";\nimport { useGridSelector } from \"../../utils/index.js\";\nimport { getVisibleRows } from \"../../utils/useGridVisibleRows.js\";\nimport { gridRowsMetaSelector } from \"../rows/gridRowsMetaSelector.js\";\nimport { getValidRowHeight, rowHeightWarning } from \"../rows/gridRowsUtils.js\";\nimport { getTotalHeaderHeight } from \"../columns/gridColumnsUtils.js\";\nimport { DATA_GRID_PROPS_DEFAULT_VALUES } from \"../../../constants/dataGridPropsDefaultValues.js\";\nimport { roundToDecimalPlaces } from \"../../../utils/roundToDecimalPlaces.js\";\nimport { isJSDOM } from \"../../../utils/isJSDOM.js\";\nimport { isDeepEqual } from \"../../../utils/utils.js\";\nconst EMPTY_SIZE = {\n  width: 0,\n  height: 0\n};\nconst EMPTY_DIMENSIONS = {\n  isReady: false,\n  root: EMPTY_SIZE,\n  viewportOuterSize: EMPTY_SIZE,\n  viewportInnerSize: EMPTY_SIZE,\n  contentSize: EMPTY_SIZE,\n  minimumSize: EMPTY_SIZE,\n  hasScrollX: false,\n  hasScrollY: false,\n  scrollbarSize: 0,\n  headerHeight: 0,\n  groupHeaderHeight: 0,\n  headerFilterHeight: 0,\n  rowWidth: 0,\n  rowHeight: 0,\n  columnsTotalWidth: 0,\n  leftPinnedWidth: 0,\n  rightPinnedWidth: 0,\n  headersTotalHeight: 0,\n  topContainerHeight: 0,\n  bottomContainerHeight: 0\n};\nexport const dimensionsStateInitializer = (state, props, apiRef) => {\n  const dimensions = EMPTY_DIMENSIONS;\n  const density = gridDensityFactorSelector(apiRef);\n  return _extends({}, state, {\n    dimensions: _extends({}, dimensions, getStaticDimensions(props, apiRef, density, gridVisiblePinnedColumnDefinitionsSelector(apiRef)))\n  });\n};\nconst columnsTotalWidthSelector = createSelector(gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector, (visibleColumns, positions) => {\n  const colCount = visibleColumns.length;\n  if (colCount === 0) {\n    return 0;\n  }\n  return roundToDecimalPlaces(positions[colCount - 1] + visibleColumns[colCount - 1].computedWidth, 1);\n});\nexport function useGridDimensions(apiRef, props) {\n  const logger = useGridLogger(apiRef, 'useResizeContainer');\n  const errorShown = React.useRef(false);\n  const rootDimensionsRef = React.useRef(EMPTY_SIZE);\n  const pinnedColumns = useGridSelector(apiRef, gridVisiblePinnedColumnDefinitionsSelector);\n  const densityFactor = useGridSelector(apiRef, gridDensityFactorSelector);\n  const columnsTotalWidth = useGridSelector(apiRef, columnsTotalWidthSelector);\n  const isFirstSizing = React.useRef(true);\n  const {\n    rowHeight,\n    headerHeight,\n    groupHeaderHeight,\n    headerFilterHeight,\n    headersTotalHeight,\n    leftPinnedWidth,\n    rightPinnedWidth\n  } = getStaticDimensions(props, apiRef, densityFactor, pinnedColumns);\n  const previousSize = React.useRef(undefined);\n  const getRootDimensions = React.useCallback(() => gridDimensionsSelector(apiRef.current.state), [apiRef]);\n  const setDimensions = React.useCallback(dimensions => {\n    apiRef.current.setState(state => _extends({}, state, {\n      dimensions\n    }));\n    if (apiRef.current.rootElementRef.current) {\n      setCSSVariables(apiRef.current.rootElementRef.current, gridDimensionsSelector(apiRef.current.state));\n    }\n  }, [apiRef]);\n  const resize = React.useCallback(() => {\n    const element = apiRef.current.mainElementRef.current;\n    if (!element) {\n      return;\n    }\n    const computedStyle = ownerWindow(element).getComputedStyle(element);\n    const newSize = {\n      width: parseFloat(computedStyle.width) || 0,\n      height: parseFloat(computedStyle.height) || 0\n    };\n    if (!previousSize.current || !areElementSizesEqual(previousSize.current, newSize)) {\n      apiRef.current.publishEvent('resize', newSize);\n      previousSize.current = newSize;\n    }\n  }, [apiRef]);\n  const getViewportPageSize = React.useCallback(() => {\n    const dimensions = gridDimensionsSelector(apiRef.current.state);\n    if (!dimensions.isReady) {\n      return 0;\n    }\n    const currentPage = getVisibleRows(apiRef);\n\n    // TODO: Use a combination of scrollTop, dimensions.viewportInnerSize.height and rowsMeta.possitions\n    // to find out the maximum number of rows that can fit in the visible part of the grid\n    if (props.getRowHeight) {\n      const renderContext = gridRenderContextSelector(apiRef);\n      const viewportPageSize = renderContext.lastRowIndex - renderContext.firstRowIndex;\n      return Math.min(viewportPageSize - 1, currentPage.rows.length);\n    }\n    const maximumPageSizeWithoutScrollBar = Math.floor(dimensions.viewportInnerSize.height / rowHeight);\n    return Math.min(maximumPageSizeWithoutScrollBar, currentPage.rows.length);\n  }, [apiRef, props.getRowHeight, rowHeight]);\n  const updateDimensions = React.useCallback(() => {\n    if (isFirstSizing.current) {\n      return;\n    }\n    // All the floating point dimensions should be rounded to .1 decimal places to avoid subpixel rendering issues\n    // https://github.com/mui/mui-x/issues/9550#issuecomment-1619020477\n    // https://github.com/mui/mui-x/issues/15721\n    const scrollbarSize = measureScrollbarSize(apiRef.current.mainElementRef.current, props.scrollbarSize);\n    const rowsMeta = gridRowsMetaSelector(apiRef.current.state);\n    const topContainerHeight = headersTotalHeight + rowsMeta.pinnedTopRowsTotalHeight;\n    const bottomContainerHeight = rowsMeta.pinnedBottomRowsTotalHeight;\n    const nonPinnedColumnsTotalWidth = columnsTotalWidth - leftPinnedWidth - rightPinnedWidth;\n    const contentSize = {\n      width: nonPinnedColumnsTotalWidth,\n      height: roundToDecimalPlaces(rowsMeta.currentPageTotalHeight, 1)\n    };\n    let viewportOuterSize;\n    let viewportInnerSize;\n    let hasScrollX = false;\n    let hasScrollY = false;\n    if (props.autoHeight) {\n      hasScrollY = false;\n      hasScrollX = Math.round(columnsTotalWidth) > Math.round(rootDimensionsRef.current.width);\n      viewportOuterSize = {\n        width: rootDimensionsRef.current.width,\n        height: topContainerHeight + bottomContainerHeight + contentSize.height\n      };\n      viewportInnerSize = {\n        width: Math.max(0, viewportOuterSize.width - (hasScrollY ? scrollbarSize : 0)),\n        height: Math.max(0, viewportOuterSize.height - (hasScrollX ? scrollbarSize : 0))\n      };\n    } else {\n      viewportOuterSize = {\n        width: rootDimensionsRef.current.width,\n        height: rootDimensionsRef.current.height\n      };\n      viewportInnerSize = {\n        width: Math.max(0, viewportOuterSize.width - leftPinnedWidth - rightPinnedWidth),\n        height: Math.max(0, viewportOuterSize.height - topContainerHeight - bottomContainerHeight)\n      };\n      const content = contentSize;\n      const container = viewportInnerSize;\n      const hasScrollXIfNoYScrollBar = content.width > container.width;\n      const hasScrollYIfNoXScrollBar = content.height > container.height;\n      if (hasScrollXIfNoYScrollBar || hasScrollYIfNoXScrollBar) {\n        hasScrollY = hasScrollYIfNoXScrollBar;\n        hasScrollX = content.width + (hasScrollY ? scrollbarSize : 0) > container.width;\n\n        // We recalculate the scroll y to consider the size of the x scrollbar.\n        if (hasScrollX) {\n          hasScrollY = content.height + scrollbarSize > container.height;\n        }\n      }\n      if (hasScrollY) {\n        viewportInnerSize.width -= scrollbarSize;\n      }\n      if (hasScrollX) {\n        viewportInnerSize.height -= scrollbarSize;\n      }\n    }\n    const rowWidth = Math.max(viewportOuterSize.width, columnsTotalWidth + (hasScrollY ? scrollbarSize : 0));\n    const minimumSize = {\n      width: columnsTotalWidth,\n      height: topContainerHeight + contentSize.height + bottomContainerHeight\n    };\n    const newDimensions = {\n      isReady: true,\n      root: rootDimensionsRef.current,\n      viewportOuterSize,\n      viewportInnerSize,\n      contentSize,\n      minimumSize,\n      hasScrollX,\n      hasScrollY,\n      scrollbarSize,\n      headerHeight,\n      groupHeaderHeight,\n      headerFilterHeight,\n      rowWidth,\n      rowHeight,\n      columnsTotalWidth,\n      leftPinnedWidth,\n      rightPinnedWidth,\n      headersTotalHeight,\n      topContainerHeight,\n      bottomContainerHeight\n    };\n    const prevDimensions = apiRef.current.state.dimensions;\n    if (isDeepEqual(prevDimensions, newDimensions)) {\n      return;\n    }\n    setDimensions(newDimensions);\n    if (!areElementSizesEqual(newDimensions.viewportInnerSize, prevDimensions.viewportInnerSize)) {\n      apiRef.current.publishEvent('viewportInnerSizeChange', newDimensions.viewportInnerSize);\n    }\n    apiRef.current.updateRenderContext?.();\n  }, [apiRef, setDimensions, props.scrollbarSize, props.autoHeight, rowHeight, headerHeight, groupHeaderHeight, headerFilterHeight, columnsTotalWidth, headersTotalHeight, leftPinnedWidth, rightPinnedWidth]);\n  const updateDimensionCallback = useEventCallback(updateDimensions);\n  const debouncedUpdateDimensions = React.useMemo(() => props.resizeThrottleMs > 0 ? throttle(() => {\n    updateDimensionCallback();\n    apiRef.current.publishEvent('debouncedResize', rootDimensionsRef.current);\n  }, props.resizeThrottleMs) : undefined, [apiRef, props.resizeThrottleMs, updateDimensionCallback]);\n  React.useEffect(() => debouncedUpdateDimensions?.clear, [debouncedUpdateDimensions]);\n  const apiPublic = {\n    resize,\n    getRootDimensions\n  };\n  const apiPrivate = {\n    updateDimensions,\n    getViewportPageSize\n  };\n  useEnhancedEffect(updateDimensions, [updateDimensions]);\n  useGridApiMethod(apiRef, apiPublic, 'public');\n  useGridApiMethod(apiRef, apiPrivate, 'private');\n  const handleRootMount = React.useCallback(root => {\n    setCSSVariables(root, gridDimensionsSelector(apiRef.current.state));\n  }, [apiRef]);\n  const handleResize = React.useCallback(size => {\n    rootDimensionsRef.current = size;\n    if (size.height === 0 && !errorShown.current && !props.autoHeight && !isJSDOM) {\n      logger.error(['The parent DOM element of the Data Grid has an empty height.', 'Please make sure that this element has an intrinsic height.', 'The grid displays with a height of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\\n'));\n      errorShown.current = true;\n    }\n    if (size.width === 0 && !errorShown.current && !isJSDOM) {\n      logger.error(['The parent DOM element of the Data Grid has an empty width.', 'Please make sure that this element has an intrinsic width.', 'The grid displays with a width of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\\n'));\n      errorShown.current = true;\n    }\n    if (isFirstSizing.current || !debouncedUpdateDimensions) {\n      // We want to initialize the grid dimensions as soon as possible to avoid flickering\n      isFirstSizing.current = false;\n      updateDimensions();\n      return;\n    }\n    debouncedUpdateDimensions();\n  }, [updateDimensions, props.autoHeight, debouncedUpdateDimensions, logger]);\n  useGridApiOptionHandler(apiRef, 'rootMount', handleRootMount);\n  useGridApiOptionHandler(apiRef, 'resize', handleResize);\n  useGridApiOptionHandler(apiRef, 'debouncedResize', props.onResize);\n}\nfunction setCSSVariables(root, dimensions) {\n  const set = (k, v) => root.style.setProperty(k, v);\n  set('--DataGrid-hasScrollX', `${Number(dimensions.hasScrollX)}`);\n  set('--DataGrid-hasScrollY', `${Number(dimensions.hasScrollY)}`);\n  set('--DataGrid-scrollbarSize', `${dimensions.scrollbarSize}px`);\n  set('--DataGrid-rowWidth', `${dimensions.rowWidth}px`);\n  set('--DataGrid-columnsTotalWidth', `${dimensions.columnsTotalWidth}px`);\n  set('--DataGrid-leftPinnedWidth', `${dimensions.leftPinnedWidth}px`);\n  set('--DataGrid-rightPinnedWidth', `${dimensions.rightPinnedWidth}px`);\n  set('--DataGrid-headerHeight', `${dimensions.headerHeight}px`);\n  set('--DataGrid-headersTotalHeight', `${dimensions.headersTotalHeight}px`);\n  set('--DataGrid-topContainerHeight', `${dimensions.topContainerHeight}px`);\n  set('--DataGrid-bottomContainerHeight', `${dimensions.bottomContainerHeight}px`);\n  set('--height', `${dimensions.rowHeight}px`);\n}\nfunction getStaticDimensions(props, apiRef, density, pinnedColumnns) {\n  const validRowHeight = getValidRowHeight(props.rowHeight, DATA_GRID_PROPS_DEFAULT_VALUES.rowHeight, rowHeightWarning);\n  return {\n    rowHeight: Math.floor(validRowHeight * density),\n    headerHeight: Math.floor(props.columnHeaderHeight * density),\n    groupHeaderHeight: Math.floor((props.columnGroupHeaderHeight ?? props.columnHeaderHeight) * density),\n    headerFilterHeight: Math.floor((props.headerFilterHeight ?? props.columnHeaderHeight) * density),\n    columnsTotalWidth: columnsTotalWidthSelector(apiRef),\n    headersTotalHeight: getTotalHeaderHeight(apiRef, props),\n    leftPinnedWidth: pinnedColumnns.left.reduce((w, col) => w + col.computedWidth, 0),\n    rightPinnedWidth: pinnedColumnns.right.reduce((w, col) => w + col.computedWidth, 0)\n  };\n}\nconst scrollbarSizeCache = new WeakMap();\nfunction measureScrollbarSize(element, scrollbarSize) {\n  if (scrollbarSize !== undefined) {\n    return scrollbarSize;\n  }\n  if (element === null) {\n    return 0;\n  }\n  const cachedSize = scrollbarSizeCache.get(element);\n  if (cachedSize !== undefined) {\n    return cachedSize;\n  }\n  const doc = ownerDocument(element);\n  const scrollDiv = doc.createElement('div');\n  scrollDiv.style.width = '99px';\n  scrollDiv.style.height = '99px';\n  scrollDiv.style.position = 'absolute';\n  scrollDiv.style.overflow = 'scroll';\n  scrollDiv.className = 'scrollDiv';\n  element.appendChild(scrollDiv);\n  const size = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n  element.removeChild(scrollDiv);\n  scrollbarSizeCache.set(element, size);\n  return size;\n}\nfunction areElementSizesEqual(a, b) {\n  return a.width === b.width && a.height === b.height;\n}","map":{"version":3,"names":["_extends","React","unstable_ownerDocument","ownerDocument","unstable_useEnhancedEffect","useEnhancedEffect","unstable_useEventCallback","useEventCallback","unstable_ownerWindow","ownerWindow","throttle","useGridApiOptionHandler","useGridApiMethod","createSelector","useGridLogger","gridColumnPositionsSelector","gridVisibleColumnDefinitionsSelector","gridVisiblePinnedColumnDefinitionsSelector","gridDimensionsSelector","gridDensityFactorSelector","gridRenderContextSelector","useGridSelector","getVisibleRows","gridRowsMetaSelector","getValidRowHeight","rowHeightWarning","getTotalHeaderHeight","DATA_GRID_PROPS_DEFAULT_VALUES","roundToDecimalPlaces","isJSDOM","isDeepEqual","EMPTY_SIZE","width","height","EMPTY_DIMENSIONS","isReady","root","viewportOuterSize","viewportInnerSize","contentSize","minimumSize","hasScrollX","hasScrollY","scrollbarSize","headerHeight","groupHeaderHeight","headerFilterHeight","rowWidth","rowHeight","columnsTotalWidth","leftPinnedWidth","rightPinnedWidth","headersTotalHeight","topContainerHeight","bottomContainerHeight","dimensionsStateInitializer","state","props","apiRef","dimensions","density","getStaticDimensions","columnsTotalWidthSelector","visibleColumns","positions","colCount","length","computedWidth","useGridDimensions","logger","errorShown","useRef","rootDimensionsRef","pinnedColumns","densityFactor","isFirstSizing","previousSize","undefined","getRootDimensions","useCallback","current","setDimensions","setState","rootElementRef","setCSSVariables","resize","element","mainElementRef","computedStyle","getComputedStyle","newSize","parseFloat","areElementSizesEqual","publishEvent","getViewportPageSize","currentPage","getRowHeight","renderContext","viewportPageSize","lastRowIndex","firstRowIndex","Math","min","rows","maximumPageSizeWithoutScrollBar","floor","updateDimensions","measureScrollbarSize","rowsMeta","pinnedTopRowsTotalHeight","pinnedBottomRowsTotalHeight","nonPinnedColumnsTotalWidth","currentPageTotalHeight","autoHeight","round","max","content","container","hasScrollXIfNoYScrollBar","hasScrollYIfNoXScrollBar","newDimensions","prevDimensions","updateRenderContext","updateDimensionCallback","debouncedUpdateDimensions","useMemo","resizeThrottleMs","useEffect","clear","apiPublic","apiPrivate","handleRootMount","handleResize","size","error","join","onResize","set","k","v","style","setProperty","Number","pinnedColumnns","validRowHeight","columnHeaderHeight","columnGroupHeaderHeight","left","reduce","w","col","right","scrollbarSizeCache","WeakMap","cachedSize","get","doc","scrollDiv","createElement","position","overflow","className","appendChild","offsetWidth","clientWidth","removeChild","a","b"],"sources":["/home/asma/dev/medtech-connect-web/Medtech-connect/frontend/node_modules/@mui/x-data-grid/hooks/features/dimensions/useGridDimensions.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_ownerDocument as ownerDocument, unstable_useEnhancedEffect as useEnhancedEffect, unstable_useEventCallback as useEventCallback, unstable_ownerWindow as ownerWindow } from '@mui/utils';\nimport { throttle } from '@mui/x-internals/throttle';\nimport { useGridApiOptionHandler } from \"../../utils/useGridApiEventHandler.js\";\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { createSelector } from \"../../../utils/createSelector.js\";\nimport { useGridLogger } from \"../../utils/useGridLogger.js\";\nimport { gridColumnPositionsSelector, gridVisibleColumnDefinitionsSelector, gridVisiblePinnedColumnDefinitionsSelector } from \"../columns/index.js\";\nimport { gridDimensionsSelector } from \"./gridDimensionsSelectors.js\";\nimport { gridDensityFactorSelector } from \"../density/index.js\";\nimport { gridRenderContextSelector } from \"../virtualization/index.js\";\nimport { useGridSelector } from \"../../utils/index.js\";\nimport { getVisibleRows } from \"../../utils/useGridVisibleRows.js\";\nimport { gridRowsMetaSelector } from \"../rows/gridRowsMetaSelector.js\";\nimport { getValidRowHeight, rowHeightWarning } from \"../rows/gridRowsUtils.js\";\nimport { getTotalHeaderHeight } from \"../columns/gridColumnsUtils.js\";\nimport { DATA_GRID_PROPS_DEFAULT_VALUES } from \"../../../constants/dataGridPropsDefaultValues.js\";\nimport { roundToDecimalPlaces } from \"../../../utils/roundToDecimalPlaces.js\";\nimport { isJSDOM } from \"../../../utils/isJSDOM.js\";\nimport { isDeepEqual } from \"../../../utils/utils.js\";\nconst EMPTY_SIZE = {\n  width: 0,\n  height: 0\n};\nconst EMPTY_DIMENSIONS = {\n  isReady: false,\n  root: EMPTY_SIZE,\n  viewportOuterSize: EMPTY_SIZE,\n  viewportInnerSize: EMPTY_SIZE,\n  contentSize: EMPTY_SIZE,\n  minimumSize: EMPTY_SIZE,\n  hasScrollX: false,\n  hasScrollY: false,\n  scrollbarSize: 0,\n  headerHeight: 0,\n  groupHeaderHeight: 0,\n  headerFilterHeight: 0,\n  rowWidth: 0,\n  rowHeight: 0,\n  columnsTotalWidth: 0,\n  leftPinnedWidth: 0,\n  rightPinnedWidth: 0,\n  headersTotalHeight: 0,\n  topContainerHeight: 0,\n  bottomContainerHeight: 0\n};\nexport const dimensionsStateInitializer = (state, props, apiRef) => {\n  const dimensions = EMPTY_DIMENSIONS;\n  const density = gridDensityFactorSelector(apiRef);\n  return _extends({}, state, {\n    dimensions: _extends({}, dimensions, getStaticDimensions(props, apiRef, density, gridVisiblePinnedColumnDefinitionsSelector(apiRef)))\n  });\n};\nconst columnsTotalWidthSelector = createSelector(gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector, (visibleColumns, positions) => {\n  const colCount = visibleColumns.length;\n  if (colCount === 0) {\n    return 0;\n  }\n  return roundToDecimalPlaces(positions[colCount - 1] + visibleColumns[colCount - 1].computedWidth, 1);\n});\nexport function useGridDimensions(apiRef, props) {\n  const logger = useGridLogger(apiRef, 'useResizeContainer');\n  const errorShown = React.useRef(false);\n  const rootDimensionsRef = React.useRef(EMPTY_SIZE);\n  const pinnedColumns = useGridSelector(apiRef, gridVisiblePinnedColumnDefinitionsSelector);\n  const densityFactor = useGridSelector(apiRef, gridDensityFactorSelector);\n  const columnsTotalWidth = useGridSelector(apiRef, columnsTotalWidthSelector);\n  const isFirstSizing = React.useRef(true);\n  const {\n    rowHeight,\n    headerHeight,\n    groupHeaderHeight,\n    headerFilterHeight,\n    headersTotalHeight,\n    leftPinnedWidth,\n    rightPinnedWidth\n  } = getStaticDimensions(props, apiRef, densityFactor, pinnedColumns);\n  const previousSize = React.useRef(undefined);\n  const getRootDimensions = React.useCallback(() => gridDimensionsSelector(apiRef.current.state), [apiRef]);\n  const setDimensions = React.useCallback(dimensions => {\n    apiRef.current.setState(state => _extends({}, state, {\n      dimensions\n    }));\n    if (apiRef.current.rootElementRef.current) {\n      setCSSVariables(apiRef.current.rootElementRef.current, gridDimensionsSelector(apiRef.current.state));\n    }\n  }, [apiRef]);\n  const resize = React.useCallback(() => {\n    const element = apiRef.current.mainElementRef.current;\n    if (!element) {\n      return;\n    }\n    const computedStyle = ownerWindow(element).getComputedStyle(element);\n    const newSize = {\n      width: parseFloat(computedStyle.width) || 0,\n      height: parseFloat(computedStyle.height) || 0\n    };\n    if (!previousSize.current || !areElementSizesEqual(previousSize.current, newSize)) {\n      apiRef.current.publishEvent('resize', newSize);\n      previousSize.current = newSize;\n    }\n  }, [apiRef]);\n  const getViewportPageSize = React.useCallback(() => {\n    const dimensions = gridDimensionsSelector(apiRef.current.state);\n    if (!dimensions.isReady) {\n      return 0;\n    }\n    const currentPage = getVisibleRows(apiRef);\n\n    // TODO: Use a combination of scrollTop, dimensions.viewportInnerSize.height and rowsMeta.possitions\n    // to find out the maximum number of rows that can fit in the visible part of the grid\n    if (props.getRowHeight) {\n      const renderContext = gridRenderContextSelector(apiRef);\n      const viewportPageSize = renderContext.lastRowIndex - renderContext.firstRowIndex;\n      return Math.min(viewportPageSize - 1, currentPage.rows.length);\n    }\n    const maximumPageSizeWithoutScrollBar = Math.floor(dimensions.viewportInnerSize.height / rowHeight);\n    return Math.min(maximumPageSizeWithoutScrollBar, currentPage.rows.length);\n  }, [apiRef, props.getRowHeight, rowHeight]);\n  const updateDimensions = React.useCallback(() => {\n    if (isFirstSizing.current) {\n      return;\n    }\n    // All the floating point dimensions should be rounded to .1 decimal places to avoid subpixel rendering issues\n    // https://github.com/mui/mui-x/issues/9550#issuecomment-1619020477\n    // https://github.com/mui/mui-x/issues/15721\n    const scrollbarSize = measureScrollbarSize(apiRef.current.mainElementRef.current, props.scrollbarSize);\n    const rowsMeta = gridRowsMetaSelector(apiRef.current.state);\n    const topContainerHeight = headersTotalHeight + rowsMeta.pinnedTopRowsTotalHeight;\n    const bottomContainerHeight = rowsMeta.pinnedBottomRowsTotalHeight;\n    const nonPinnedColumnsTotalWidth = columnsTotalWidth - leftPinnedWidth - rightPinnedWidth;\n    const contentSize = {\n      width: nonPinnedColumnsTotalWidth,\n      height: roundToDecimalPlaces(rowsMeta.currentPageTotalHeight, 1)\n    };\n    let viewportOuterSize;\n    let viewportInnerSize;\n    let hasScrollX = false;\n    let hasScrollY = false;\n    if (props.autoHeight) {\n      hasScrollY = false;\n      hasScrollX = Math.round(columnsTotalWidth) > Math.round(rootDimensionsRef.current.width);\n      viewportOuterSize = {\n        width: rootDimensionsRef.current.width,\n        height: topContainerHeight + bottomContainerHeight + contentSize.height\n      };\n      viewportInnerSize = {\n        width: Math.max(0, viewportOuterSize.width - (hasScrollY ? scrollbarSize : 0)),\n        height: Math.max(0, viewportOuterSize.height - (hasScrollX ? scrollbarSize : 0))\n      };\n    } else {\n      viewportOuterSize = {\n        width: rootDimensionsRef.current.width,\n        height: rootDimensionsRef.current.height\n      };\n      viewportInnerSize = {\n        width: Math.max(0, viewportOuterSize.width - leftPinnedWidth - rightPinnedWidth),\n        height: Math.max(0, viewportOuterSize.height - topContainerHeight - bottomContainerHeight)\n      };\n      const content = contentSize;\n      const container = viewportInnerSize;\n      const hasScrollXIfNoYScrollBar = content.width > container.width;\n      const hasScrollYIfNoXScrollBar = content.height > container.height;\n      if (hasScrollXIfNoYScrollBar || hasScrollYIfNoXScrollBar) {\n        hasScrollY = hasScrollYIfNoXScrollBar;\n        hasScrollX = content.width + (hasScrollY ? scrollbarSize : 0) > container.width;\n\n        // We recalculate the scroll y to consider the size of the x scrollbar.\n        if (hasScrollX) {\n          hasScrollY = content.height + scrollbarSize > container.height;\n        }\n      }\n      if (hasScrollY) {\n        viewportInnerSize.width -= scrollbarSize;\n      }\n      if (hasScrollX) {\n        viewportInnerSize.height -= scrollbarSize;\n      }\n    }\n    const rowWidth = Math.max(viewportOuterSize.width, columnsTotalWidth + (hasScrollY ? scrollbarSize : 0));\n    const minimumSize = {\n      width: columnsTotalWidth,\n      height: topContainerHeight + contentSize.height + bottomContainerHeight\n    };\n    const newDimensions = {\n      isReady: true,\n      root: rootDimensionsRef.current,\n      viewportOuterSize,\n      viewportInnerSize,\n      contentSize,\n      minimumSize,\n      hasScrollX,\n      hasScrollY,\n      scrollbarSize,\n      headerHeight,\n      groupHeaderHeight,\n      headerFilterHeight,\n      rowWidth,\n      rowHeight,\n      columnsTotalWidth,\n      leftPinnedWidth,\n      rightPinnedWidth,\n      headersTotalHeight,\n      topContainerHeight,\n      bottomContainerHeight\n    };\n    const prevDimensions = apiRef.current.state.dimensions;\n    if (isDeepEqual(prevDimensions, newDimensions)) {\n      return;\n    }\n    setDimensions(newDimensions);\n    if (!areElementSizesEqual(newDimensions.viewportInnerSize, prevDimensions.viewportInnerSize)) {\n      apiRef.current.publishEvent('viewportInnerSizeChange', newDimensions.viewportInnerSize);\n    }\n    apiRef.current.updateRenderContext?.();\n  }, [apiRef, setDimensions, props.scrollbarSize, props.autoHeight, rowHeight, headerHeight, groupHeaderHeight, headerFilterHeight, columnsTotalWidth, headersTotalHeight, leftPinnedWidth, rightPinnedWidth]);\n  const updateDimensionCallback = useEventCallback(updateDimensions);\n  const debouncedUpdateDimensions = React.useMemo(() => props.resizeThrottleMs > 0 ? throttle(() => {\n    updateDimensionCallback();\n    apiRef.current.publishEvent('debouncedResize', rootDimensionsRef.current);\n  }, props.resizeThrottleMs) : undefined, [apiRef, props.resizeThrottleMs, updateDimensionCallback]);\n  React.useEffect(() => debouncedUpdateDimensions?.clear, [debouncedUpdateDimensions]);\n  const apiPublic = {\n    resize,\n    getRootDimensions\n  };\n  const apiPrivate = {\n    updateDimensions,\n    getViewportPageSize\n  };\n  useEnhancedEffect(updateDimensions, [updateDimensions]);\n  useGridApiMethod(apiRef, apiPublic, 'public');\n  useGridApiMethod(apiRef, apiPrivate, 'private');\n  const handleRootMount = React.useCallback(root => {\n    setCSSVariables(root, gridDimensionsSelector(apiRef.current.state));\n  }, [apiRef]);\n  const handleResize = React.useCallback(size => {\n    rootDimensionsRef.current = size;\n    if (size.height === 0 && !errorShown.current && !props.autoHeight && !isJSDOM) {\n      logger.error(['The parent DOM element of the Data Grid has an empty height.', 'Please make sure that this element has an intrinsic height.', 'The grid displays with a height of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\\n'));\n      errorShown.current = true;\n    }\n    if (size.width === 0 && !errorShown.current && !isJSDOM) {\n      logger.error(['The parent DOM element of the Data Grid has an empty width.', 'Please make sure that this element has an intrinsic width.', 'The grid displays with a width of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\\n'));\n      errorShown.current = true;\n    }\n    if (isFirstSizing.current || !debouncedUpdateDimensions) {\n      // We want to initialize the grid dimensions as soon as possible to avoid flickering\n      isFirstSizing.current = false;\n      updateDimensions();\n      return;\n    }\n    debouncedUpdateDimensions();\n  }, [updateDimensions, props.autoHeight, debouncedUpdateDimensions, logger]);\n  useGridApiOptionHandler(apiRef, 'rootMount', handleRootMount);\n  useGridApiOptionHandler(apiRef, 'resize', handleResize);\n  useGridApiOptionHandler(apiRef, 'debouncedResize', props.onResize);\n}\nfunction setCSSVariables(root, dimensions) {\n  const set = (k, v) => root.style.setProperty(k, v);\n  set('--DataGrid-hasScrollX', `${Number(dimensions.hasScrollX)}`);\n  set('--DataGrid-hasScrollY', `${Number(dimensions.hasScrollY)}`);\n  set('--DataGrid-scrollbarSize', `${dimensions.scrollbarSize}px`);\n  set('--DataGrid-rowWidth', `${dimensions.rowWidth}px`);\n  set('--DataGrid-columnsTotalWidth', `${dimensions.columnsTotalWidth}px`);\n  set('--DataGrid-leftPinnedWidth', `${dimensions.leftPinnedWidth}px`);\n  set('--DataGrid-rightPinnedWidth', `${dimensions.rightPinnedWidth}px`);\n  set('--DataGrid-headerHeight', `${dimensions.headerHeight}px`);\n  set('--DataGrid-headersTotalHeight', `${dimensions.headersTotalHeight}px`);\n  set('--DataGrid-topContainerHeight', `${dimensions.topContainerHeight}px`);\n  set('--DataGrid-bottomContainerHeight', `${dimensions.bottomContainerHeight}px`);\n  set('--height', `${dimensions.rowHeight}px`);\n}\nfunction getStaticDimensions(props, apiRef, density, pinnedColumnns) {\n  const validRowHeight = getValidRowHeight(props.rowHeight, DATA_GRID_PROPS_DEFAULT_VALUES.rowHeight, rowHeightWarning);\n  return {\n    rowHeight: Math.floor(validRowHeight * density),\n    headerHeight: Math.floor(props.columnHeaderHeight * density),\n    groupHeaderHeight: Math.floor((props.columnGroupHeaderHeight ?? props.columnHeaderHeight) * density),\n    headerFilterHeight: Math.floor((props.headerFilterHeight ?? props.columnHeaderHeight) * density),\n    columnsTotalWidth: columnsTotalWidthSelector(apiRef),\n    headersTotalHeight: getTotalHeaderHeight(apiRef, props),\n    leftPinnedWidth: pinnedColumnns.left.reduce((w, col) => w + col.computedWidth, 0),\n    rightPinnedWidth: pinnedColumnns.right.reduce((w, col) => w + col.computedWidth, 0)\n  };\n}\nconst scrollbarSizeCache = new WeakMap();\nfunction measureScrollbarSize(element, scrollbarSize) {\n  if (scrollbarSize !== undefined) {\n    return scrollbarSize;\n  }\n  if (element === null) {\n    return 0;\n  }\n  const cachedSize = scrollbarSizeCache.get(element);\n  if (cachedSize !== undefined) {\n    return cachedSize;\n  }\n  const doc = ownerDocument(element);\n  const scrollDiv = doc.createElement('div');\n  scrollDiv.style.width = '99px';\n  scrollDiv.style.height = '99px';\n  scrollDiv.style.position = 'absolute';\n  scrollDiv.style.overflow = 'scroll';\n  scrollDiv.className = 'scrollDiv';\n  element.appendChild(scrollDiv);\n  const size = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n  element.removeChild(scrollDiv);\n  scrollbarSizeCache.set(element, size);\n  return size;\n}\nfunction areElementSizesEqual(a, b) {\n  return a.width === b.width && a.height === b.height;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}