{"ast":null,"code":"import { useGridRefs } from \"./useGridRefs.js\";\nimport { useGridIsRtl } from \"./useGridIsRtl.js\";\nimport { useGridLoggerFactory } from \"./useGridLoggerFactory.js\";\nimport { useGridApiInitialization } from \"./useGridApiInitialization.js\";\nimport { useGridLocaleText } from \"./useGridLocaleText.js\";\nimport { useGridPipeProcessing } from \"./pipeProcessing/index.js\";\nimport { useGridStrategyProcessing } from \"./strategyProcessing/index.js\";\nimport { useGridStateInitialization } from \"./useGridStateInitialization.js\";\nimport { useGridProps } from \"./useGridProps.js\";\n\n/**\n * Initialize the technical pieces of the DataGrid (logger, state, ...) that any DataGrid implementation needs\n */\nexport const useGridInitialization = (inputApiRef, props) => {\n  const privateApiRef = useGridApiInitialization(inputApiRef, props);\n  useGridRefs(privateApiRef);\n  useGridProps(privateApiRef, props);\n  useGridIsRtl(privateApiRef);\n  useGridLoggerFactory(privateApiRef, props);\n  useGridStateInitialization(privateApiRef);\n  useGridPipeProcessing(privateApiRef);\n  useGridStrategyProcessing(privateApiRef);\n  useGridLocaleText(privateApiRef, props);\n  privateApiRef.current.register('private', {\n    rootProps: props\n  });\n  return privateApiRef;\n};","map":{"version":3,"names":["useGridRefs","useGridIsRtl","useGridLoggerFactory","useGridApiInitialization","useGridLocaleText","useGridPipeProcessing","useGridStrategyProcessing","useGridStateInitialization","useGridProps","useGridInitialization","inputApiRef","props","privateApiRef","current","register","rootProps"],"sources":["/home/asma/dev/medtech-connect-web/Medtech-connect/frontend/node_modules/@mui/x-data-grid/hooks/core/useGridInitialization.js"],"sourcesContent":["import { useGridRefs } from \"./useGridRefs.js\";\nimport { useGridIsRtl } from \"./useGridIsRtl.js\";\nimport { useGridLoggerFactory } from \"./useGridLoggerFactory.js\";\nimport { useGridApiInitialization } from \"./useGridApiInitialization.js\";\nimport { useGridLocaleText } from \"./useGridLocaleText.js\";\nimport { useGridPipeProcessing } from \"./pipeProcessing/index.js\";\nimport { useGridStrategyProcessing } from \"./strategyProcessing/index.js\";\nimport { useGridStateInitialization } from \"./useGridStateInitialization.js\";\nimport { useGridProps } from \"./useGridProps.js\";\n\n/**\n * Initialize the technical pieces of the DataGrid (logger, state, ...) that any DataGrid implementation needs\n */\nexport const useGridInitialization = (inputApiRef, props) => {\n  const privateApiRef = useGridApiInitialization(inputApiRef, props);\n  useGridRefs(privateApiRef);\n  useGridProps(privateApiRef, props);\n  useGridIsRtl(privateApiRef);\n  useGridLoggerFactory(privateApiRef, props);\n  useGridStateInitialization(privateApiRef);\n  useGridPipeProcessing(privateApiRef);\n  useGridStrategyProcessing(privateApiRef);\n  useGridLocaleText(privateApiRef, props);\n  privateApiRef.current.register('private', {\n    rootProps: props\n  });\n  return privateApiRef;\n};"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,YAAY,QAAQ,mBAAmB;AAChD,SAASC,oBAAoB,QAAQ,2BAA2B;AAChE,SAASC,wBAAwB,QAAQ,+BAA+B;AACxE,SAASC,iBAAiB,QAAQ,wBAAwB;AAC1D,SAASC,qBAAqB,QAAQ,2BAA2B;AACjE,SAASC,yBAAyB,QAAQ,+BAA+B;AACzE,SAASC,0BAA0B,QAAQ,iCAAiC;AAC5E,SAASC,YAAY,QAAQ,mBAAmB;;AAEhD;AACA;AACA;AACA,OAAO,MAAMC,qBAAqB,GAAGA,CAACC,WAAW,EAAEC,KAAK,KAAK;EAC3D,MAAMC,aAAa,GAAGT,wBAAwB,CAACO,WAAW,EAAEC,KAAK,CAAC;EAClEX,WAAW,CAACY,aAAa,CAAC;EAC1BJ,YAAY,CAACI,aAAa,EAAED,KAAK,CAAC;EAClCV,YAAY,CAACW,aAAa,CAAC;EAC3BV,oBAAoB,CAACU,aAAa,EAAED,KAAK,CAAC;EAC1CJ,0BAA0B,CAACK,aAAa,CAAC;EACzCP,qBAAqB,CAACO,aAAa,CAAC;EACpCN,yBAAyB,CAACM,aAAa,CAAC;EACxCR,iBAAiB,CAACQ,aAAa,EAAED,KAAK,CAAC;EACvCC,aAAa,CAACC,OAAO,CAACC,QAAQ,CAAC,SAAS,EAAE;IACxCC,SAAS,EAAEJ;EACb,CAAC,CAAC;EACF,OAAOC,aAAa;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}