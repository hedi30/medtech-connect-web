{"ast":null,"code":"import { createSelector } from \"../../../utils/createSelector.js\";\nexport const gridDimensionsSelector = state => state.dimensions;\n\n/**\n * Get the summed width of all the visible columns.\n * @category Visible Columns\n */\nexport const gridColumnsTotalWidthSelector = createSelector(gridDimensionsSelector, dimensions => dimensions.columnsTotalWidth);\nexport const gridRowHeightSelector = state => state.dimensions.rowHeight;\nexport const gridContentHeightSelector = state => state.dimensions.contentSize.height;\nexport const gridHasScrollXSelector = state => state.dimensions.hasScrollX;\nexport const gridHasScrollYSelector = state => state.dimensions.hasScrollY;\nexport const gridHasFillerSelector = state => state.dimensions.columnsTotalWidth < state.dimensions.viewportOuterSize.width;\nexport const gridHeaderHeightSelector = state => state.dimensions.headerHeight;\nexport const gridGroupHeaderHeightSelector = state => state.dimensions.groupHeaderHeight;\nexport const gridHeaderFilterHeightSelector = state => state.dimensions.headerFilterHeight;\nexport const gridVerticalScrollbarWidthSelector = state => state.dimensions.hasScrollY ? state.dimensions.scrollbarSize : 0;\nexport const gridHorizontalScrollbarHeightSelector = state => state.dimensions.hasScrollX ? state.dimensions.scrollbarSize : 0;\nexport const gridHasBottomFillerSelector = state => {\n  const height = state.dimensions.hasScrollX ? state.dimensions.scrollbarSize : 0;\n  const needsLastRowBorder = state.dimensions.viewportOuterSize.height - state.dimensions.minimumSize.height > 0;\n  if (height === 0 && !needsLastRowBorder) {\n    return false;\n  }\n  return true;\n};","map":{"version":3,"names":["createSelector","gridDimensionsSelector","state","dimensions","gridColumnsTotalWidthSelector","columnsTotalWidth","gridRowHeightSelector","rowHeight","gridContentHeightSelector","contentSize","height","gridHasScrollXSelector","hasScrollX","gridHasScrollYSelector","hasScrollY","gridHasFillerSelector","viewportOuterSize","width","gridHeaderHeightSelector","headerHeight","gridGroupHeaderHeightSelector","groupHeaderHeight","gridHeaderFilterHeightSelector","headerFilterHeight","gridVerticalScrollbarWidthSelector","scrollbarSize","gridHorizontalScrollbarHeightSelector","gridHasBottomFillerSelector","needsLastRowBorder","minimumSize"],"sources":["/home/asma/dev/medtech-connect-web/Medtech-connect/frontend/node_modules/@mui/x-data-grid/hooks/features/dimensions/gridDimensionsSelectors.js"],"sourcesContent":["import { createSelector } from \"../../../utils/createSelector.js\";\nexport const gridDimensionsSelector = state => state.dimensions;\n\n/**\n * Get the summed width of all the visible columns.\n * @category Visible Columns\n */\nexport const gridColumnsTotalWidthSelector = createSelector(gridDimensionsSelector, dimensions => dimensions.columnsTotalWidth);\nexport const gridRowHeightSelector = state => state.dimensions.rowHeight;\nexport const gridContentHeightSelector = state => state.dimensions.contentSize.height;\nexport const gridHasScrollXSelector = state => state.dimensions.hasScrollX;\nexport const gridHasScrollYSelector = state => state.dimensions.hasScrollY;\nexport const gridHasFillerSelector = state => state.dimensions.columnsTotalWidth < state.dimensions.viewportOuterSize.width;\nexport const gridHeaderHeightSelector = state => state.dimensions.headerHeight;\nexport const gridGroupHeaderHeightSelector = state => state.dimensions.groupHeaderHeight;\nexport const gridHeaderFilterHeightSelector = state => state.dimensions.headerFilterHeight;\nexport const gridVerticalScrollbarWidthSelector = state => state.dimensions.hasScrollY ? state.dimensions.scrollbarSize : 0;\nexport const gridHorizontalScrollbarHeightSelector = state => state.dimensions.hasScrollX ? state.dimensions.scrollbarSize : 0;\nexport const gridHasBottomFillerSelector = state => {\n  const height = state.dimensions.hasScrollX ? state.dimensions.scrollbarSize : 0;\n  const needsLastRowBorder = state.dimensions.viewportOuterSize.height - state.dimensions.minimumSize.height > 0;\n  if (height === 0 && !needsLastRowBorder) {\n    return false;\n  }\n  return true;\n};"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kCAAkC;AACjE,OAAO,MAAMC,sBAAsB,GAAGC,KAAK,IAAIA,KAAK,CAACC,UAAU;;AAE/D;AACA;AACA;AACA;AACA,OAAO,MAAMC,6BAA6B,GAAGJ,cAAc,CAACC,sBAAsB,EAAEE,UAAU,IAAIA,UAAU,CAACE,iBAAiB,CAAC;AAC/H,OAAO,MAAMC,qBAAqB,GAAGJ,KAAK,IAAIA,KAAK,CAACC,UAAU,CAACI,SAAS;AACxE,OAAO,MAAMC,yBAAyB,GAAGN,KAAK,IAAIA,KAAK,CAACC,UAAU,CAACM,WAAW,CAACC,MAAM;AACrF,OAAO,MAAMC,sBAAsB,GAAGT,KAAK,IAAIA,KAAK,CAACC,UAAU,CAACS,UAAU;AAC1E,OAAO,MAAMC,sBAAsB,GAAGX,KAAK,IAAIA,KAAK,CAACC,UAAU,CAACW,UAAU;AAC1E,OAAO,MAAMC,qBAAqB,GAAGb,KAAK,IAAIA,KAAK,CAACC,UAAU,CAACE,iBAAiB,GAAGH,KAAK,CAACC,UAAU,CAACa,iBAAiB,CAACC,KAAK;AAC3H,OAAO,MAAMC,wBAAwB,GAAGhB,KAAK,IAAIA,KAAK,CAACC,UAAU,CAACgB,YAAY;AAC9E,OAAO,MAAMC,6BAA6B,GAAGlB,KAAK,IAAIA,KAAK,CAACC,UAAU,CAACkB,iBAAiB;AACxF,OAAO,MAAMC,8BAA8B,GAAGpB,KAAK,IAAIA,KAAK,CAACC,UAAU,CAACoB,kBAAkB;AAC1F,OAAO,MAAMC,kCAAkC,GAAGtB,KAAK,IAAIA,KAAK,CAACC,UAAU,CAACW,UAAU,GAAGZ,KAAK,CAACC,UAAU,CAACsB,aAAa,GAAG,CAAC;AAC3H,OAAO,MAAMC,qCAAqC,GAAGxB,KAAK,IAAIA,KAAK,CAACC,UAAU,CAACS,UAAU,GAAGV,KAAK,CAACC,UAAU,CAACsB,aAAa,GAAG,CAAC;AAC9H,OAAO,MAAME,2BAA2B,GAAGzB,KAAK,IAAI;EAClD,MAAMQ,MAAM,GAAGR,KAAK,CAACC,UAAU,CAACS,UAAU,GAAGV,KAAK,CAACC,UAAU,CAACsB,aAAa,GAAG,CAAC;EAC/E,MAAMG,kBAAkB,GAAG1B,KAAK,CAACC,UAAU,CAACa,iBAAiB,CAACN,MAAM,GAAGR,KAAK,CAACC,UAAU,CAAC0B,WAAW,CAACnB,MAAM,GAAG,CAAC;EAC9G,IAAIA,MAAM,KAAK,CAAC,IAAI,CAACkB,kBAAkB,EAAE;IACvC,OAAO,KAAK;EACd;EACA,OAAO,IAAI;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}