{"ast":null,"code":"var _jsxFileName = \"/home/asma/dev/medtech-connect-web/Medtech-connect/frontend/src/Components/AdminUI/GroupChats/CreateGroupChat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\"; // Get URL params\nimport { Box, Paper, Typography } from \"@mui/material\";\nimport UserList from \"./UserList\";\nimport GroupChatForm from \"./GroupChatForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreateGroupChat = () => {\n  _s();\n  const {\n    groupId\n  } = useParams(); // Get group ID from URL if editing\n  const isEditMode = Boolean(groupId); // If groupId exists, it's edit mode\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [groupData, setGroupData] = useState({\n    name: \"\",\n    description: \"\"\n  });\n  useEffect(() => {\n    if (isEditMode) {\n      // TODO: Fetch group data from API when available\n      console.log(`Fetching group chat with ID: ${groupId}`);\n      setGroupData({\n        name: \"Example Group\",\n        description: \"Example description\"\n      }); // Mock data\n      setSelectedUsers([\"user1\", \"user2\"]); // Mock selected users\n    }\n  }, [groupId, isEditMode]);\n  const handleSubmit = data => {\n    if (isEditMode) {\n      console.log(\"Updating Group Data:\", {\n        ...data,\n        members: selectedUsers\n      });\n      alert(\"Group Chat Updated Successfully!\");\n    } else {\n      console.log(\"Creating New Group Data:\", {\n        ...data,\n        members: selectedUsers\n      });\n      alert(\"Group Chat Created Successfully!\");\n    }\n  };\n  const handleCancel = () => {\n    setSelectedUsers([]);\n    console.log(\"Operation canceled\");\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: \"flex\",\n      gap: 3,\n      padding: 3\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        flex: 1\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        flex: 2,\n        padding: 3,\n        boxShadow: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        gutterBottom: true,\n        sx: {\n          fontWeight: \"bold\"\n        },\n        children: isEditMode ? \"Edit Group Chat\" : \"Create New Group Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GroupChatForm, {\n        initialData: groupData,\n        onSubmit: handleSubmit,\n        onCancel: handleCancel,\n        buttonText: isEditMode ? \"Update\" : \"Create Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        flex: 1,\n        padding: 2,\n        boxShadow: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: \"Select Members\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserList, {\n        selectedUsers: selectedUsers,\n        setSelectedUsers: setSelectedUsers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(CreateGroupChat, \"yvL9Oz6pug+D+Xbx7r4YPX8SBHw=\", false, function () {\n  return [useParams];\n});\n_c = CreateGroupChat;\nexport default CreateGroupChat;\nvar _c;\n$RefreshReg$(_c, \"CreateGroupChat\");","map":{"version":3,"names":["React","useEffect","useState","useParams","Box","Paper","Typography","UserList","GroupChatForm","jsxDEV","_jsxDEV","CreateGroupChat","_s","groupId","isEditMode","Boolean","selectedUsers","setSelectedUsers","groupData","setGroupData","name","description","console","log","handleSubmit","data","members","alert","handleCancel","sx","display","gap","padding","children","flex","fileName","_jsxFileName","lineNumber","columnNumber","boxShadow","variant","gutterBottom","fontWeight","initialData","onSubmit","onCancel","buttonText","_c","$RefreshReg$"],"sources":["/home/asma/dev/medtech-connect-web/Medtech-connect/frontend/src/Components/AdminUI/GroupChats/CreateGroupChat.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\"; // Get URL params\nimport { Box, Paper, Typography } from \"@mui/material\";\nimport UserList from \"./UserList\";\nimport GroupChatForm from \"./GroupChatForm\";\n\nconst CreateGroupChat = () => {\n  const { groupId } = useParams(); // Get group ID from URL if editing\n  const isEditMode = Boolean(groupId); // If groupId exists, it's edit mode\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [groupData, setGroupData] = useState({ name: \"\", description: \"\" });\n\n  useEffect(() => {\n    if (isEditMode) {\n      // TODO: Fetch group data from API when available\n      console.log(`Fetching group chat with ID: ${groupId}`);\n      setGroupData({ name: \"Example Group\", description: \"Example description\" }); // Mock data\n      setSelectedUsers([\"user1\", \"user2\"]); // Mock selected users\n    }\n  }, [groupId, isEditMode]);\n\n  const handleSubmit = (data) => {\n    if (isEditMode) {\n      console.log(\"Updating Group Data:\", { ...data, members: selectedUsers });\n      alert(\"Group Chat Updated Successfully!\");\n    } else {\n      console.log(\"Creating New Group Data:\", { ...data, members: selectedUsers });\n      alert(\"Group Chat Created Successfully!\");\n    }\n  };\n\n  const handleCancel = () => {\n    setSelectedUsers([]);\n    console.log(\"Operation canceled\");\n  };\n\n  return (\n    <Box sx={{ display: \"flex\", gap: 3, padding: 3 }}>\n      <Box sx={{ flex: 1 }} />\n      <Paper sx={{ flex: 2, padding: 3, boxShadow: 3 }}>\n        <Typography variant=\"h5\" gutterBottom sx={{ fontWeight: \"bold\" }}>\n          {isEditMode ? \"Edit Group Chat\" : \"Create New Group Chat\"}\n        </Typography>\n        <GroupChatForm \n          initialData={groupData} \n          onSubmit={handleSubmit} \n          onCancel={handleCancel} \n          buttonText={isEditMode ? \"Update\" : \"Create Chat\"}\n        />\n      </Paper>\n      <Paper sx={{ flex: 1, padding: 2, boxShadow: 3 }}>\n        <Typography variant=\"h6\" gutterBottom>\n          Select Members\n        </Typography>\n        <UserList selectedUsers={selectedUsers} setSelectedUsers={setSelectedUsers} />\n      </Paper>\n    </Box>\n  );\n};\n\nexport default CreateGroupChat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}