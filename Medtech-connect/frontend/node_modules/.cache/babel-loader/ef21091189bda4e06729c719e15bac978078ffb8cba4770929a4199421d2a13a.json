{"ast":null,"code":"import * as React from 'react';\nimport { fastObjectShallowCompare } from '@mui/x-internals/fastObjectShallowCompare';\nimport { warnOnce } from '@mui/x-internals/warning';\nimport { useSyncExternalStore } from 'use-sync-external-store/shim';\nimport { useLazyRef } from \"./useLazyRef.js\";\nfunction isOutputSelector(selector) {\n  return selector.acceptsApiRef;\n}\n// TODO v8: Remove this function\nfunction applySelector(apiRef, selector) {\n  if (isOutputSelector(selector)) {\n    return selector(apiRef);\n  }\n  return selector(apiRef.current.state);\n}\n\n// TODO v8: Rename this function to `applySelector`\nfunction applySelectorV8(apiRef, selector, args, instanceId) {\n  if (isOutputSelector(selector)) {\n    return selector(apiRef, args);\n  }\n  return selector(apiRef.current.state, instanceId);\n}\nconst defaultCompare = Object.is;\nexport const objectShallowCompare = fastObjectShallowCompare;\nconst arrayShallowCompare = (a, b) => {\n  if (a === b) {\n    return true;\n  }\n  return a.length === b.length && a.every((v, i) => v === b[i]);\n};\nexport const argsEqual = (prev, curr) => {\n  let fn = Object.is;\n  if (curr instanceof Array) {\n    fn = arrayShallowCompare;\n  } else if (curr instanceof Object) {\n    fn = objectShallowCompare;\n  }\n  return fn(prev, curr);\n};\nconst createRefs = () => ({\n  state: null,\n  equals: null,\n  selector: null,\n  args: undefined\n});\nconst EMPTY = [];\nconst emptyGetSnapshot = () => null;\n\n// TODO v8: Remove this function\nexport const useGridSelector = (apiRef, selector, equals = defaultCompare) => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!apiRef.current.state) {\n      warnOnce(['MUI X: `useGridSelector` has been called before the initialization of the state.', 'This hook can only be used inside the context of the grid.']);\n    }\n  }\n  const refs = useLazyRef(createRefs);\n  const didInit = refs.current.selector !== null;\n  const [state, setState] = React.useState(\n  // We don't use an initialization function to avoid allocations\n  didInit ? null : applySelector(apiRef, selector));\n  refs.current.state = state;\n  refs.current.equals = equals;\n  refs.current.selector = selector;\n  const subscribe = React.useCallback(() => {\n    if (refs.current.subscription) {\n      return null;\n    }\n    refs.current.subscription = apiRef.current.store.subscribe(() => {\n      const newState = applySelector(apiRef, refs.current.selector);\n      if (!refs.current.equals(refs.current.state, newState)) {\n        refs.current.state = newState;\n        setState(newState);\n      }\n    });\n    return null;\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  EMPTY);\n  const unsubscribe = React.useCallback(() => {\n    return () => {\n      if (refs.current.subscription) {\n        refs.current.subscription();\n        refs.current.subscription = undefined;\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, EMPTY);\n  useSyncExternalStore(unsubscribe, subscribe, emptyGetSnapshot);\n  return state;\n};\n\n// TODO v8: Rename this function to `useGridSelector`\nexport const useGridSelectorV8 = (apiRef, selector, args = undefined, equals = defaultCompare) => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!apiRef.current.state) {\n      warnOnce(['MUI X: `useGridSelector` has been called before the initialization of the state.', 'This hook can only be used inside the context of the grid.']);\n    }\n  }\n  const refs = useLazyRef(createRefs);\n  const didInit = refs.current.selector !== null;\n  const [state, setState] = React.useState(\n  // We don't use an initialization function to avoid allocations\n  didInit ? null : applySelectorV8(apiRef, selector, args, apiRef.current.instanceId));\n  refs.current.state = state;\n  refs.current.equals = equals;\n  refs.current.selector = selector;\n  const prevArgs = refs.current.args;\n  refs.current.args = args;\n  if (didInit && !argsEqual(prevArgs, args)) {\n    const newState = applySelectorV8(apiRef, refs.current.selector, refs.current.args, apiRef.current.instanceId);\n    if (!refs.current.equals(refs.current.state, newState)) {\n      refs.current.state = newState;\n      setState(newState);\n    }\n  }\n  const subscribe = React.useCallback(() => {\n    if (refs.current.subscription) {\n      return null;\n    }\n    refs.current.subscription = apiRef.current.store.subscribe(() => {\n      const newState = applySelectorV8(apiRef, refs.current.selector, refs.current.args, apiRef.current.instanceId);\n      if (!refs.current.equals(refs.current.state, newState)) {\n        refs.current.state = newState;\n        setState(newState);\n      }\n    });\n    return null;\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  EMPTY);\n  const unsubscribe = React.useCallback(() => {\n    return () => {\n      if (refs.current.subscription) {\n        refs.current.subscription();\n        refs.current.subscription = undefined;\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, EMPTY);\n  useSyncExternalStore(unsubscribe, subscribe, emptyGetSnapshot);\n  return state;\n};","map":{"version":3,"names":["React","fastObjectShallowCompare","warnOnce","useSyncExternalStore","useLazyRef","isOutputSelector","selector","acceptsApiRef","applySelector","apiRef","current","state","applySelectorV8","args","instanceId","defaultCompare","Object","is","objectShallowCompare","arrayShallowCompare","a","b","length","every","v","i","argsEqual","prev","curr","fn","Array","createRefs","equals","undefined","EMPTY","emptyGetSnapshot","useGridSelector","process","env","NODE_ENV","refs","didInit","setState","useState","subscribe","useCallback","subscription","store","newState","unsubscribe","useGridSelectorV8","prevArgs"],"sources":["/home/asma/dev/medtech-connect-web/Medtech-connect/frontend/node_modules/@mui/x-data-grid/hooks/utils/useGridSelector.js"],"sourcesContent":["import * as React from 'react';\nimport { fastObjectShallowCompare } from '@mui/x-internals/fastObjectShallowCompare';\nimport { warnOnce } from '@mui/x-internals/warning';\nimport { useSyncExternalStore } from 'use-sync-external-store/shim';\nimport { useLazyRef } from \"./useLazyRef.js\";\nfunction isOutputSelector(selector) {\n  return selector.acceptsApiRef;\n}\n// TODO v8: Remove this function\nfunction applySelector(apiRef, selector) {\n  if (isOutputSelector(selector)) {\n    return selector(apiRef);\n  }\n  return selector(apiRef.current.state);\n}\n\n// TODO v8: Rename this function to `applySelector`\nfunction applySelectorV8(apiRef, selector, args, instanceId) {\n  if (isOutputSelector(selector)) {\n    return selector(apiRef, args);\n  }\n  return selector(apiRef.current.state, instanceId);\n}\nconst defaultCompare = Object.is;\nexport const objectShallowCompare = fastObjectShallowCompare;\nconst arrayShallowCompare = (a, b) => {\n  if (a === b) {\n    return true;\n  }\n  return a.length === b.length && a.every((v, i) => v === b[i]);\n};\nexport const argsEqual = (prev, curr) => {\n  let fn = Object.is;\n  if (curr instanceof Array) {\n    fn = arrayShallowCompare;\n  } else if (curr instanceof Object) {\n    fn = objectShallowCompare;\n  }\n  return fn(prev, curr);\n};\nconst createRefs = () => ({\n  state: null,\n  equals: null,\n  selector: null,\n  args: undefined\n});\nconst EMPTY = [];\nconst emptyGetSnapshot = () => null;\n\n// TODO v8: Remove this function\nexport const useGridSelector = (apiRef, selector, equals = defaultCompare) => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!apiRef.current.state) {\n      warnOnce(['MUI X: `useGridSelector` has been called before the initialization of the state.', 'This hook can only be used inside the context of the grid.']);\n    }\n  }\n  const refs = useLazyRef(createRefs);\n  const didInit = refs.current.selector !== null;\n  const [state, setState] = React.useState(\n  // We don't use an initialization function to avoid allocations\n  didInit ? null : applySelector(apiRef, selector));\n  refs.current.state = state;\n  refs.current.equals = equals;\n  refs.current.selector = selector;\n  const subscribe = React.useCallback(() => {\n    if (refs.current.subscription) {\n      return null;\n    }\n    refs.current.subscription = apiRef.current.store.subscribe(() => {\n      const newState = applySelector(apiRef, refs.current.selector);\n      if (!refs.current.equals(refs.current.state, newState)) {\n        refs.current.state = newState;\n        setState(newState);\n      }\n    });\n    return null;\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  EMPTY);\n  const unsubscribe = React.useCallback(() => {\n    return () => {\n      if (refs.current.subscription) {\n        refs.current.subscription();\n        refs.current.subscription = undefined;\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, EMPTY);\n  useSyncExternalStore(unsubscribe, subscribe, emptyGetSnapshot);\n  return state;\n};\n\n// TODO v8: Rename this function to `useGridSelector`\nexport const useGridSelectorV8 = (apiRef, selector, args = undefined, equals = defaultCompare) => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!apiRef.current.state) {\n      warnOnce(['MUI X: `useGridSelector` has been called before the initialization of the state.', 'This hook can only be used inside the context of the grid.']);\n    }\n  }\n  const refs = useLazyRef(createRefs);\n  const didInit = refs.current.selector !== null;\n  const [state, setState] = React.useState(\n  // We don't use an initialization function to avoid allocations\n  didInit ? null : applySelectorV8(apiRef, selector, args, apiRef.current.instanceId));\n  refs.current.state = state;\n  refs.current.equals = equals;\n  refs.current.selector = selector;\n  const prevArgs = refs.current.args;\n  refs.current.args = args;\n  if (didInit && !argsEqual(prevArgs, args)) {\n    const newState = applySelectorV8(apiRef, refs.current.selector, refs.current.args, apiRef.current.instanceId);\n    if (!refs.current.equals(refs.current.state, newState)) {\n      refs.current.state = newState;\n      setState(newState);\n    }\n  }\n  const subscribe = React.useCallback(() => {\n    if (refs.current.subscription) {\n      return null;\n    }\n    refs.current.subscription = apiRef.current.store.subscribe(() => {\n      const newState = applySelectorV8(apiRef, refs.current.selector, refs.current.args, apiRef.current.instanceId);\n      if (!refs.current.equals(refs.current.state, newState)) {\n        refs.current.state = newState;\n        setState(newState);\n      }\n    });\n    return null;\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  EMPTY);\n  const unsubscribe = React.useCallback(() => {\n    return () => {\n      if (refs.current.subscription) {\n        refs.current.subscription();\n        refs.current.subscription = undefined;\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, EMPTY);\n  useSyncExternalStore(unsubscribe, subscribe, emptyGetSnapshot);\n  return state;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}